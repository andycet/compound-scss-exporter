import { BorderPosition, ColorToken, ShadowType, TextCase, TextDecoration, Unit } from "../index";
import { BorderStyle } from "../model/enums/SDKBorderStyle";
import { StringTokenType } from "../model/enums/SDKTokenType";
import { Token } from "../model/tokens/SDKToken";
export declare const validateToken: (t: any, tokens: Token[], name: string, hex: string, opacity?: number) => void;
export declare const validateDimensionToken: (t: any, tokens: Token[], name: string, measure: number, unit: Unit) => void;
export declare const validateStringToken: (t: any, tokens: Token[], name: string, text: string, type: StringTokenType) => void;
export declare const validateOptionToken: (t: any, tokens: Token[], name: string, text: string) => void;
export declare const validateBorderToken: (t: any, tokens: Token[], name: string, hex: string, position: BorderPosition, style: BorderStyle, measure: number, unit: Unit) => void;
export declare const validateShadowToken: (t: any, tokens: Token[], name: string, value: {
    hex: string;
    x: number;
    y: number;
    blur: number;
    spread: number;
    type: ShadowType;
}, layers: Array<{
    hex: string;
    x: number;
    y: number;
    blur: number;
    spread: number;
    type: ShadowType;
}>) => void;
export declare const validateShadowTokenRef: (t: any, tokens: Token[], description: string, refName: string, value: {
    hex: string;
    x: number;
    y: number;
    blur: number;
    spread: number;
    type: ShadowType;
}, layers: Array<{
    hex: string;
    x: number;
    y: number;
    blur: number;
    spread: number;
    type: ShadowType;
}>) => void;
export declare const validateShadowTokenRefMultiple: (t: any, tokens: Token[], description: string, layers: {
    refName: string;
    layers: Array<{
        hex: string;
        x: number;
        y: number;
        blur: number;
        spread: number;
        type: ShadowType;
    }>;
}[]) => void;
export declare const validateShadowTokenInnerRef: (t: any, tokens: Token[], name: string, value: {
    hex: string;
    x: number;
    xUnit: Unit;
    y: number;
    yUnit: Unit;
    blur: number;
    blurUnit: Unit;
    spread: number;
    spreadUnit: Unit;
    type: ShadowType;
}, layers: Array<{
    hex: string;
    x: number;
    xUnit: Unit;
    y: number;
    yUnit: Unit;
    blur: number;
    blurUnit: Unit;
    spread: number;
    spreadUnit: Unit;
    type: ShadowType;
}>, allTokens: Map<string, Token>) => void;
export declare const validateTypographyToken: (t: any, tokens: Token[], name: string, fontFamily: string, fontWeight: string, lineHeightMeasure: number, fontSizeMeasure: number, letterSpacingMeasure: number, paragraphSpacingMeasure: number, paragraphIndentMeasure: number, textDecoration: TextDecoration, textCase: TextCase) => void;
export declare const validateTypographyTokenRef: (t: any, tokens: Token[], description: string, refName: string, fontFamily: string, fontWeight: string, lineHeightMeasure: number, fontSizeMeasure: number, letterSpacingMeasure: number, paragraphSpacingMeasure: number, paragraphIndentMeasure: number, textDecoration: TextDecoration, textCase: TextCase) => void;
export declare const validateTypographyTokenInnerRef: (t: any, tokens: Token[], name: string, fontFamily: string, fontWeight: string, lineHeightMeasure: number, fontSizeMeasure: number, letterSpacingMeasure: number, paragraphSpacingMeasure: number, paragraphIndentMeasure: number, textDecoration: TextDecoration, textCase: TextCase) => void;
export declare const validateNoToken: (t: any, tokens: Token[], name: string) => void;
export declare const validateTokenRef: (t: any, tokens: Token[], description: string, hex: string, name: string, refDescription?: string) => void;
export declare const validateTokensJustColorRef: (t: any, token: ColorToken, colorRef: ColorToken, name: string, hex: string, opacity?: number, colorRefId?: string, colorRefName?: string, refHex?: string, refOpacity?: number) => void;
export declare const validateTokenJustColorRef: (t: any, tokens: Token[], name: string, hex: string, opacity?: number, colorRefId?: string, colorRefName?: string, refHex?: string, refOpacity?: number) => void;
export declare const validateColorTokenJustOpacityRef: (t: any, tokens: Token[], name: string, opacity: number, unit: Unit, opacityRefId: string, opacityRefName: string) => void;
export declare const validateDimensionTokenRef: (t: any, tokens: Token[], description: string, refName: string, measure: number, unit: Unit) => void;
export declare const validateBorderTokenRef: (t: any, tokens: Token[], description: string, refName: string, hex: string, position: BorderPosition, style: BorderStyle, measure: number, unit: Unit) => void;
export declare const validateBorderTokenInnerRef: (t: any, tokens: Token[], name: string, hex: string, position: BorderPosition, style: BorderStyle, measure: number, unit: Unit) => void;
export declare const validateOrigin: (t: any, tokens: Token[], name: string, nameRef: string) => void;
