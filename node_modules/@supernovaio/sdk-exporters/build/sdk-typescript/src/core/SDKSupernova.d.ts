import { AreaAssets } from "./areas/SDKAreaAssets";
import { AreaAutomation } from "./areas/SDKAreaAutomation";
import { AreaBrands } from "./areas/SDKAreaBrands";
import { AreaBulkOperations } from "./areas/SDKAreaBulkOperations";
import { AreaComponents } from "./areas/SDKAreaComponents";
import { AreaDataSources } from "./areas/SDKAreaDataSources";
import { AreaDesignSystems } from "./areas/SDKAreaDesignSystems";
import { AreaDocumentation } from "./areas/SDKAreaDocumentation";
import { AreaIntegrations } from "./areas/SDKAreaIntegrations";
import { AreaMe } from "./areas/SDKAreaMe";
import { AreaNetwork } from "./areas/SDKAreaNetwork";
import { AreaTokens } from "./areas/SDKAreaTokens";
import { AreaUsers } from "./areas/SDKAreaUsers";
import { AreaVersions } from "./areas/SDKAreaVersions";
import { AreaWorkspaces } from "./areas/SDKAreaWorkspaces";
import { DataBridgeRequestHook } from "./data/SDKDataBridge";
/** Main Supernova.io SDK object. Use this to connect to your data instance and retrieve workspace / design system / version from which you can access all neccessary data. */
export declare class Supernova {
    private apiKey;
    private apiUrl;
    private apiVersion;
    private requestHook;
    private dataCore;
    /** Get, create, update, manipulate or delete workspaces */
    workspaces: AreaWorkspaces;
    /** Get, create, update, manipulate or delete design systems */
    designSystems: AreaDesignSystems;
    /** Get, create, update, manipulate or delete versions */
    versions: AreaVersions;
    /** Get, create, update, manipulate or delete brands */
    brands: AreaBrands;
    /** Get, create, update, manipulate or delete tokens */
    tokens: AreaTokens;
    /** Get, create, update, manipulate or delete components */
    components: AreaComponents;
    /** Get, create, update, manipulate or delete assets */
    assets: AreaAssets;
    /** Get, create, update, manipulate or delete documentation items */
    documentation: AreaDocumentation;
    /** Get, create, update, manipulate or delete pipelines and automation jobs */
    automation: AreaAutomation;
    /** Get, create, update, manipulate or delete users */
    users: AreaUsers;
    /** Get, create, update, manipulate or delete current user */
    me: AreaMe;
    /** Get, create, update, manipulate or delete integrations */
    integrations: AreaIntegrations;
    /** Get, create, update, manipulate or delete data sources */
    dataSources: AreaDataSources;
    /** Get, create, update, manipulate or delete data from Supernova en masse */
    bulkOperations: AreaBulkOperations;
    /** Get access to network in exporter packages */
    network: AreaNetwork;
    /**
     * Create new Supernova.io SDK object.
     * @param apiKey API key to use for authentication
     * @param options Options for SDK
     * @param options.url URL of the Supernova.io instance to connect to. Defaults to production environment
     * @param options.requestHook Hook for observing requests
     * @param options.bypassEnvFetch When enabled, internal node-fetch lib will be used in environments when fetch is not available. Defaults to false
     */
    constructor(apiKey: string, options?: {
        apiUrl?: string;
        requestHook?: DataBridgeRequestHook;
        bypassEnvFetch?: boolean;
    });
}
