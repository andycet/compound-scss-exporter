import { Acl } from "../../model/acl/SDKAcl";
import { Membership } from "../../model/membership/SDKMembership";
import { UserMembership } from "../../model/users/SDKUserMembership";
import { Workspace } from "../../model/workspaces/SDKWorkspace";
import { WorkspaceIPWhitelistSettings, WorkspaceIPWhitelistSettingsUpdateModel } from "../../model/workspaces/SDKWorkspaceIPWhitelistSettings";
import { WorkspaceNPMRegistrySettings, WorkspaceNPMRegistrySettingsUpdateModel } from "../../model/workspaces/SDKWorkspaceNPMRegistrySettings";
import { WorkspaceOnboarding, WorkspaceOnboardingUpdateModel } from "../../model/workspaces/SDKWorkspaceOnboarding";
import { SubscriptionProductFeatures } from "../../model/workspaces/SDKWorkspaceProductFeatures";
import { WorkspaceProfileUpdateModel } from "../../model/workspaces/SDKWorkspaceProfile";
import { WorkspaceSSOSettingsUpdateModel } from "../../model/workspaces/SDKWorkspaceSSOSettings";
import { DataCore } from "../data/SDKDataCore";
export declare class AreaWorkspaces {
    /** Internal: Engine */
    private dataCore;
    constructor(dataCore: DataCore);
    /** Fetches one specific workspace by provided id
     * @param workspaceId - ID of the workspace
     * @returns Full workspace object
     */
    workspace(workspaceId: string): Promise<Workspace>;
    /** Fetches all workspaces user has access to. Use `memberships` instead if you want to also know which role the current user has in which workspace
     * @param userId - ID of the user
     * @returns All workspaces user is part of
     */
    workspaces(userId: string): Promise<Array<Workspace>>;
    /** Fetches all memberships user is part of. Each memberships contains workspace and user role.
     * @param userId - ID of the user
     * @returns All workspaces user is part of
     */
    memberships(userId: string): Promise<Array<Membership>>;
    /** Fetches all users that are part of the workspace. Each user contains user role as well.
     * @param workspaceId - ID of the workspace
     * @returns All users that are members of the provided workspace
     */
    userMemberships(workspaceId: string): Promise<Array<UserMembership>>;
    subscriptionProductFeatures(): Promise<SubscriptionProductFeatures>;
    acls(): Promise<Acl>;
    /** Validates if the handle is available for use
     * @param handle - Handle to validate
     * @returns True if the handle is available (not occupied by any other workspace), false otherwise
     */
    validateIsWorkspaceHandleAvailable(handle: string): Promise<boolean>;
    /** Fetches workspace onboarding status
     * @param workspaceId - ID of the workspace
     * @returns Workspace onboarding status
     */
    workspaceOnboarding(workspaceId: string): Promise<WorkspaceOnboarding>;
    /** Fetches workspace IP whitelist settings
     * @param workspaceId - ID of the workspace
     * @returns Workspace IP whitelist settings or null if the workspace is not using IP whitelist
     */
    workspaceIPWhitelistSettings(workspaceId: string): Promise<WorkspaceIPWhitelistSettings | null>;
    /** Fetches workspace NPM registry settings
     * @param workspaceId - ID of the workspace
     * @returns Workspace NPM registry settings or null if the workspace is not using NPM registry
     */
    workspaceNPMRegistrySettings(workspaceId: string): Promise<WorkspaceNPMRegistrySettings | null>;
    /** Fetches workspace SSO settings
     * @param workspaceId - ID of the workspace
     * @returns Workspace SSO settings or null if the workspace is not using SSO
     */
    workspaceSSOSettings(workspaceId: string): Promise<WorkspaceSSOSettingsUpdateModel | null>;
    /** Creates new workspace and retrieves the newly created workspace object. The user who creates the workspace becomes its owner
     * @param name - Name of the workspace
     * @param handle - Handle of the workspace to create. Use `validateIsWorkspaceHandleAvailable` to check if the handle is available
     * @returns Newly created workspace object
     */
    createWorkspace(name: string, handle?: string): Promise<Workspace>;
    /** Updates workspace profile for a specific workspace
     * @param workspaceId - ID of the workspace
     * @param update - New profile data
     * @returns Nothing
     */
    updateWorkspaceProfile(workspaceId: string, update: WorkspaceProfileUpdateModel): Promise<void>;
    /** tests accessibility of IP allowlist settings
     * @param workspaceId - ID of the workspace
     * @param ipWhitelistSettings - settings to test
     * @returns information if workspace is accesible by your IP
     */
    testIpWhitelistSettings(workspaceId: string, ipWhitelistSettings: WorkspaceIPWhitelistSettingsUpdateModel): Promise<{
        accessible: boolean;
    }>;
    /** Updates workspace onboarding state for a specific workspace
     * @param workspaceId - ID of the workspace
     * @param update - New onboarding state
     * @returns Nothing
     */
    updateWorkspaceOnboarding(workspaceId: string, update: WorkspaceOnboardingUpdateModel): Promise<void>;
    /** Updates workspace avatar for a specific workspace
     * @param workspaceId - ID of the workspace
     * @param avatar - New avatar
     * @returns Nothing
     */
    updateWorkspaceAvatar(workspaceId: string, avatar: File): Promise<void>;
    /** Updates workspace SSO settings for a specific workspace
     * @param workspaceId - ID of the workspace
     * @param profile - New SSO configuration
     * @returns Nothing
     */
    updateWorkspaceSSOSettings(workspaceId: string, update: WorkspaceSSOSettingsUpdateModel): Promise<void>;
    /** Updates workspace IP whitelist settings for a specific workspace
     * @param workspaceId - ID of the workspace
     * @param profile - New IP whitelist configuration
     * @returns Nothing
     */
    updateWorkspaceIPWhitelistSettings(workspaceId: string, ipWhitelistSettings: WorkspaceIPWhitelistSettingsUpdateModel): Promise<void>;
    /** Updates workspace NPM registry settings for a specific workspace
     * @param workspaceId - ID of the workspace
     * @param profile - New NPM registry configuration
     * @returns Nothing
     */
    updateWorkspaceNPMRegistrySettings(workspaceId: string, npmRegistrySettings: WorkspaceNPMRegistrySettingsUpdateModel): Promise<void>;
    /** Deletes a single workspace. This action is irreversible, all data will be lost, and can only be performed by the workspace owner
     * @param workspaceId - ID of the workspace
     * @returns Nothing
     */
    deleteWorkspace(workspaceId: string): Promise<void>;
    /** Deletes workspace avatar. This action is irreversible
     * @param workspaceId - ID of the workspace
     * @returns Nothing
     */
    deleteWorkspaceAvatar(workspaceId: string): Promise<void>;
    /** Deletes a workspace registry settings for a specific workspace
     * @param workspaceId - ID of the workspace
     * @returns Nothing
     */
    deleteWorkspaceNPMRegistrySettings(workspaceId: string): Promise<void>;
}
