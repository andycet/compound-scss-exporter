import { DocumentationEnvironment } from "../../model/enums/SDKDocumentationEnvironment";
import { ExporterCustomBlockVariant } from "../../model/exporters/custom_blocks/SDKExporterCustomBlockVariant";
import { ExporterConfigurationProperty } from "../../model/exporters/custom_properties/SDKExporterConfigurationProperty";
import { Exporter } from "../../model/exporters/SDKExporter";
import { Pipeline } from "../../model/exporters/SDKPipeline";
import { ImportJob } from "../../model/jobs/SDKImportJob";
import { DataCore } from "../data/SDKDataCore";
import { RemoteVersionIdentifier, RemoteWorkspaceVersionIdentifier } from "./SDKRemoteIdentifiers";
export declare class AreaAutomation {
    /** Internal: Engine */
    private dataCore;
    constructor(dataCore: DataCore);
    /** Fetches all pipelines that are available for the workspace by id */
    getPipelines(workspaceId: string): Promise<Array<Pipeline>>;
    /** Fetches exporters belonging to workspace by id */
    getExporters(workspaceId: string): Promise<Array<Exporter>>;
    /** Fetches all custom configuration properties that specific exporter provides
     * @param exporterId - Identifier of the exporter to fetch configuration for
     * @param from - Remote version to fetch from
     * @returns All custom blocks
     */
    getExporterConfiguration(workspaceId: string, exporterId: string, designSystemId: string): Promise<Array<ExporterConfigurationProperty>>;
    /** Fetches all custom variants that specific exporter provides
     * @param workspaceId - Identifier of the workspace where the exporter is installed
     * @param exporterId - Identifier of the exporter to fetch configuration for
     * @returns All custom variants
     */
    getExporterBlockVariants(workspaceId: string, exporterId: string): Promise<Array<ExporterCustomBlockVariant>>;
    /** Publish documentation. This queues a build on Supernova's server that will be processed by the asynchronous CI/CD pipeline. You can request status of the build with associated `isBeingPublished` method. */
    publish(to: RemoteWorkspaceVersionIdentifier, environment: DocumentationEnvironment): Promise<{
        status: "Queued" | "InProgress" | "Failure";
        jobId: string | null;
        exporterId: string | null;
    }>;
    /** Publish documentation. This queues a build on Supernova's server that will be processed by the asynchronous CI/CD pipeline. You can request status of the build with associated `isBeingPublished` method. */
    isPublishing(to: RemoteWorkspaceVersionIdentifier, environment: DocumentationEnvironment): Promise<{
        status: "InProgress" | "Idle";
        jobId: string | null;
        exporterId: string | null;
    }>;
    /** Gets all import jobs that are currently in progress.
     * @param userId - User id to delete integration for. Can only be invoked on user id that is currently authenticated.
     * @returns Nothing
     */
    getImportJobs(from: RemoteVersionIdentifier): Promise<Array<ImportJob>>;
    getImportJob(from: RemoteVersionIdentifier, jobId: string): Promise<ImportJob>;
    scheduleImportJobForFigmaSources(from: RemoteVersionIdentifier, sourceIds: Array<string>, dryRun?: boolean): Promise<ImportJob>;
    deletePipeline(workspaceId: string, pipelineId: string): Promise<void>;
}
