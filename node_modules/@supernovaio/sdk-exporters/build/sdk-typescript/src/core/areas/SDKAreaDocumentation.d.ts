import { DocumentationLegacy, DocumentationLegacyModel } from "../../model/base/SDKDocumentationLegacy";
import { DocsBlockDefinition } from "../../model/docs/blocks/definition/SDKDocsBlockDefinition";
import { DocsBlock } from "../../model/docs/blocks/usage/SDKDocsBlock";
import { DocsEntity } from "../../model/docs/entities/SDKDocsEntity";
import { DocsSection } from "../../model/docs/sections/SDKDocsSection";
import { DocumentationLegacyGroup, DocumentationLegacyGroupModel } from "../../model/documentation/SDKDocumentationLegacyGroup";
import { DocumentationLegacyPage, DocumentationLegacyPageModel } from "../../model/documentation/SDKDocumentationLegacyPage";
import { DataCore } from "../data/SDKDataCore";
import { RemoteVersionIdentifier, RemoteWorkspaceVersionIdentifier } from "./SDKRemoteIdentifiers";
export declare class AreaDocumentation {
    /** Internal: Engine */
    private dataCore;
    constructor(dataCore: DataCore);
    /** Fetches object containing the main information about the docs. This does not contain structure or content of the documentation
     * @param from - Remote version to fetch from
     * @returns Documentation object
     */
    getDocumentation(from: RemoteWorkspaceVersionIdentifier): Promise<DocumentationLegacy>;
    /** Fetches url string where to find documentation
     * @param from - Remote version to fetch from
     * @returns documentation url string
     */
    getDocumentationUrl(from: RemoteVersionIdentifier): Promise<string>;
    /** Updates documentation structure
     * @param from - Remote version to fetch from
     * @param model - documentation legacy model
     * @returns nothing
     */
    updateDocumentationStructure(from: RemoteVersionIdentifier, model: DocumentationLegacyModel): Promise<void>;
    /** Fetches all documentation groups
     * @param from - Remote version to fetch from
     * @returns All documentation groups
     */
    getDocumentationGroups(from: RemoteWorkspaceVersionIdentifier): Promise<Array<DocumentationLegacyGroup>>;
    /** Creates a documentation page within documentation group
     * @param from - Remote version to fetch from
     * @param parentItemPersistentId - Peristent ID of the parent group
     * @param newTitle - title of the newly created page
     * @returns Newly created documentation page
     */
    createDocumentationPage(from: RemoteWorkspaceVersionIdentifier, parentItemPersistentId: string, newTitle?: string): Promise<DocumentationLegacyPage>;
    /** Creates a documentation group within documentation group
     * @param from - Remote version to fetch from
     * @param parentItemPersistentId - Peristent ID of the parent group
     * @param data - The update model
     * @returns Newly created documentation group
     */
    createDocumentationGroup(from: RemoteWorkspaceVersionIdentifier, parentItemPersistentId: string, data: Partial<DocumentationLegacyGroupModel>): Promise<DocumentationLegacyGroup>;
    /** Updates a documentation group within documentation group
     * @param from - Remote version to fetch from
     * @param group - Group to update
     * @param updateModel - Group update model with optional fields
     * @returns Newly created documentation group
     */
    updateDocumentationGroup(from: RemoteWorkspaceVersionIdentifier, group: DocumentationLegacyGroup, updateModel: Partial<DocumentationLegacyGroupModel>): Promise<DocumentationLegacyGroup>;
    /** Deletes a documentation group
     * @param from - Remote version to fetch from
     * @param group - Group to delete
     * @returns nothing
     */
    deleteDocumentationGroup(from: RemoteWorkspaceVersionIdentifier, group: DocumentationLegacyGroup): Promise<void>;
    /** Deletes a documentation group and its tree
     * @param from - Remote version to fetch from
     * @param group - Group to delete
     * @returns nothing
     */
    deleteDocumentationGroupAndTree(from: RemoteWorkspaceVersionIdentifier, group: DocumentationLegacyGroup): Promise<void>;
    /** Deletes a documentation page
     * @param from - Remote version to fetch from
     * @param page - Page to delete
     * @returns nothing
     */
    deleteDocumentationPage(from: RemoteWorkspaceVersionIdentifier, idInVersion: string): Promise<void>;
    /** Updates a documentation tab or page
     * @param from - Remote version to fetch from
     * @param page - page to update
     * @param updateModel - data to update page with
     * @returns nothing
     */
    updateDocumentationPageOrTab(from: RemoteWorkspaceVersionIdentifier, page: DocumentationLegacyPage, updateModel: Partial<DocumentationLegacyPageModel>): Promise<DocumentationLegacyPage>;
    /** Duplicates a documentation tab or page
     * @param from - Remote version to fetch from
     * @param idInVersion - id of page or tab to be duplicated
     * @param persistentId - persistent id of page or tab to be duplicated
     * @returns nothing
     */
    duplicateDocumentationPageOrTab(from: RemoteWorkspaceVersionIdentifier, idInVersion: string): Promise<void>;
    /** Ungroups a documentation group
     * @param from - Remote version to fetch from
     * @param idInVersion - id of a group
     * @returns nothing
     */
    ungroupDocumentationGroup(from: RemoteWorkspaceVersionIdentifier, idInVersion: string): Promise<void>;
    /** Fetches all documentation items
     * @param from - Remote version to fetch from
     * @returns All documentation pages
     */
    getDocumentationItems(from: RemoteWorkspaceVersionIdentifier): Promise<import("../..").DocumentationLegacyItem[]>;
    /** Fetches all documentation pages
     * @param from - Remote version to fetch from
     * @returns All documentation pages
     */
    getDocumentationPages(from: RemoteWorkspaceVersionIdentifier): Promise<Array<DocumentationLegacyPage>>;
    /** Fetches object containing the structure of the docs - documentation pages and groups with metadata but without the page payloads
     * Not implemented for now
     * @param from - Remote version to fetch from
     * @returnsDocumentationLegacy object
     */
    getDocumentationStructureFromRoot(from: RemoteWorkspaceVersionIdentifier): Promise<DocumentationLegacyGroup>;
    /** Fetches entire documentation documentation structure, including all pages and groups and their payloads
     * @param from - Remote version to fetch from
     * @returns All documentation items
     */
    getDocumentationFromRoot(from: RemoteWorkspaceVersionIdentifier): Promise<DocumentationLegacyGroup>;
    getDocumentationMockedStructure(): Array<DocsEntity>;
    getDocumentationMockedPageContent(pageId: string): Array<DocsBlock | DocsSection>;
    getDocumentationMockedEditorBlockDefinitions(): Array<DocsBlockDefinition>;
}
