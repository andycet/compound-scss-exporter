import { BlurToken, BlurType, BorderPosition, BorderStyle, BorderToken, GradientToken, GradientType, OpacityToken, RadiusToken, ShadowToken, ShadowType, TextCaseToken, TextDecorationToken, TokenTheme, TypographyToken, VisibilityToken } from "../../exports";
import { ColorToken } from "../../model/tokens/SDKColorToken";
import { BorderWidthToken, DimensionToken, DurationToken, FontSizeToken, LetterSpacingToken, LineHeightToken, ParagraphSpacingToken, SizeToken, SpaceToken, ZIndexToken } from "../../model/tokens/SDKDimensionToken";
import { FontFamilyToken, FontWeightToken, ProductCopyToken, StringToken } from "../../model/tokens/SDKStringToken";
import { AnyMultiLayerToken, AnySingleLayerToken, AnyToken, BorderWidthTokenValue, ColorTokenValue, ColorValue, DimensionTokenValue, DurationTokenValue, FontFamilyTokenValue, FontSizeTokenValue, FontWeightTokenValue, LetterSpacingTokenValue, LineHeightTokenValue, OpacityTokenValue, ParagraphSpacingTokenValue, ProductCopyTokenValue, RadiusTokenValue, RawValue, SizeTokenValue, SpaceTokenValue, StringTokenValue, TextCaseTokenValue, TextDecorationTokenValue, VisibilityTokenValue, ZIndexTokenValue } from "../../model/tokens/SDKTokenValue";
export declare class AreaTokenValues {
    /** Creates a new theme with updated overrides */
    tokenThemeByUpdatingOverride(theme: TokenTheme, override: AnyToken): TokenTheme;
    /** Creates a new theme with removed override */
    tokenThemeByRemovingOverride(theme: TokenTheme, tokenId: string): TokenTheme;
    /** Creates a new color token with updated .color value */
    colorTokenByUpdatingColor(token: ColorToken, newValue: ColorValue | ColorToken): ColorToken;
    /** Creates a new color token with updated .opacity value */
    colorTokenByUpdatingOpacity(token: ColorToken, newValue: number | OpacityToken): ColorToken;
    /** Creates a new blur token with updated .type value */
    blurTokenByUpdatingType(token: BlurToken, newValue: BlurType): BlurToken;
    /** Creates a new blur token with updated .radius value */
    blurTokenByUpdatingRadius(token: BlurToken, newValue: RawValue<DimensionTokenValue> | RadiusToken): BlurToken;
    /** Creates a new typography token with updated .fontFamily value */
    typographyTokenByUpdatingFontFamily(token: TypographyToken, newValue: RawValue<FontFamilyTokenValue> | FontFamilyToken): TypographyToken;
    /** Creates a new typography token with updated .fontWeight value */
    typographyTokenByUpdatingFontWeight(token: TypographyToken, newValue: RawValue<FontWeightTokenValue> | FontWeightToken): TypographyToken;
    /** Creates a new typography token with updated .fontSize value */
    typographyTokenByUpdatingFontSize(token: TypographyToken, newValue: RawValue<FontSizeTokenValue> | FontSizeToken): TypographyToken;
    /** Creates a new typography token with updated .letterSpacing value */
    typographyTokenByUpdatingLetterSpacing(token: TypographyToken, newValue: RawValue<LetterSpacingTokenValue> | LetterSpacingToken): TypographyToken;
    /** Creates a new typography token with updated .lineHeight value */
    typographyTokenByUpdatingLineHeight(token: TypographyToken, newValue: RawValue<LineHeightTokenValue> | LineHeightToken): TypographyToken;
    /** Creates a new typography token with updated .paragraphSpacing value */
    typographyTokenByUpdatingParagraphSpacing(token: TypographyToken, newValue: RawValue<ParagraphSpacingTokenValue> | ParagraphSpacingToken): TypographyToken;
    /** Creates a new typography token with updated .paragraphSpacing value */
    typographyTokenByUpdatingParagraphIndent(token: TypographyToken, newValue: RawValue<ParagraphSpacingTokenValue> | ParagraphSpacingToken): TypographyToken;
    /** Creates a new border token with updated .position value */
    typographyTokenByUpdatingTextDecoration(token: TypographyToken, newValue: RawValue<TextDecorationTokenValue> | TextDecorationToken): TypographyToken;
    /** Creates a new typography token with updated .textCase value */
    typographyTokenByUpdatingTextCase(token: TypographyToken, newValue: RawValue<TextCaseTokenValue> | TextCaseToken): TypographyToken;
    /** Creates a new border token with updated .color value. Do note, opacity is ignored */
    borderTokenByUpdatingColor(token: BorderToken, newValue: ColorValue | ColorToken): BorderToken;
    /** Creates a new border token with updated color.opacity value */
    borderTokenByUpdatingOpacity(token: BorderToken, newValue: number | OpacityToken): BorderToken;
    /** Creates a new border token with updated .width value */
    borderTokenByUpdatingWidth(token: BorderToken, newValue: RawValue<BorderWidthTokenValue> | BorderWidthToken): BorderToken;
    /** Creates a new border token with updated .position value */
    borderTokenByUpdatingPosition(token: BorderToken, newValue: BorderPosition): BorderToken;
    /** Creates a new border token with updated .style value */
    borderTokenByUpdatingStyle(token: BorderToken, newValue: BorderStyle): BorderToken;
    /** Creates a new dimension token with updated value */
    dimensionTokenByUpdatingValue(token: DimensionToken, newValue: RawValue<DimensionTokenValue>): DimensionToken;
    /** Creates a new size token with updated value */
    sizeTokenByUpdatingValue(token: SizeToken, newValue: RawValue<SizeTokenValue>): SizeToken;
    /** Creates a new space token with updated value */
    spaceTokenByUpdatingValue(token: SpaceToken, newValue: RawValue<SpaceTokenValue>): SpaceToken;
    /** Creates a new opacity token with updated value */
    opacityTokenByUpdatingValue(token: OpacityToken, newValue: RawValue<OpacityTokenValue>): OpacityToken;
    /** Creates a new font size token with updated value */
    fontSizeTokenByUpdatingValue(token: FontSizeToken, newValue: RawValue<FontSizeTokenValue>): FontSizeToken;
    /** Creates a new font size token with updated value */
    lineHeightTokenByUpdatingValue(token: LineHeightToken, newValue: RawValue<LineHeightTokenValue>): LineHeightToken;
    /** Creates a new letter spacing token with updated value */
    letterSpacingTokenByUpdatingValue(token: LetterSpacingToken, newValue: RawValue<LetterSpacingTokenValue>): LetterSpacingToken;
    /** Creates a new paragraph spacing token with updated value */
    paragraphSpacingTokenByUpdatingValue(token: ParagraphSpacingToken, newValue: RawValue<ParagraphSpacingTokenValue>): ParagraphSpacingToken;
    /** Creates a new border width token with updated value */
    borderWidthTokenByUpdatingValue(token: BorderWidthToken, newValue: RawValue<BorderWidthTokenValue>): BorderWidthToken;
    /** Creates a new radius token with updated value */
    radiusTokenByUpdatingValue(token: RadiusToken, newValue: RawValue<RadiusTokenValue>): RadiusToken;
    /** Creates a new duration token with updated value */
    durationTokenByUpdatingValue(token: DurationToken, newValue: RawValue<DurationTokenValue>): DurationToken;
    /** Creates a new z-index token with updated value */
    zIndexTokenByUpdatingValue(token: ZIndexToken, newValue: RawValue<ZIndexTokenValue>): ZIndexToken;
    /** Creates a new string token with updated value */
    stringTokenByUpdatingValue(token: StringToken, newValue: RawValue<StringTokenValue>): StringToken;
    /** Creates a new product copy token with updated value */
    productCopyTokenByUpdatingValue(token: ProductCopyToken, newValue: RawValue<ProductCopyTokenValue>): ProductCopyToken;
    /** Creates a new font family token with updated value */
    fontFamilyTokenByUpdatingValue(token: FontFamilyToken, newValue: RawValue<FontFamilyTokenValue>): FontFamilyToken;
    /** Creates a new font weight token with updated value */
    fontWeightTokenByUpdatingValue(token: FontWeightToken, newValue: RawValue<FontWeightTokenValue>): FontWeightToken;
    /** Creates a new text case token with updated value */
    textCaseTokenByUpdatingValue(token: TextCaseToken, newValue: RawValue<TextCaseTokenValue>): TextCaseToken;
    /** Creates a new text case token with updated value */
    textDecorationTokenByUpdatingValue(token: TextDecorationToken, newValue: RawValue<TextDecorationTokenValue>): TextDecorationToken;
    /** Creates a new visibility token with updated value */
    visibilityTokenByUpdatingValue(token: VisibilityToken, newValue: RawValue<VisibilityTokenValue>): VisibilityToken;
    /** Creates a new shadow token with one new extra layer added at the end of all layers */
    shadowTokenByAddingLayer(token: ShadowToken): ShadowToken;
    /** Creates a new shadow token by removing one of the layers */
    shadowTokenByRemovingLayer(token: ShadowToken, layerIndex: number): ShadowToken;
    /** Creates a new shadow token with updated .color value. Do note, opacity is ignored */
    shadowTokenByUpdatingColor(token: ShadowToken, layerIndex: number, newValue: ColorValue | ColorToken): ShadowToken;
    /** Creates a new shadow token with updated .color value */
    shadowTokenByUpdatingOpacity(token: ShadowToken, layerIndex: number, newValue: number | OpacityToken): ShadowToken;
    /** Creates a new shadow token with updated .x value */
    shadowTokenByUpdatingX(token: ShadowToken, layerIndex: number, newValue: number): ShadowToken;
    /** Creates a new shadow token with updated .y value */
    shadowTokenByUpdatingY(token: ShadowToken, layerIndex: number, newValue: number): ShadowToken;
    /** Creates a new shadow token with updated .radius value */
    shadowTokenByUpdatingRadius(token: ShadowToken, layerIndex: number, newValue: number): ShadowToken;
    /** Creates a new shadow token with updated .spread value */
    shadowTokenByUpdatingSpread(token: ShadowToken, layerIndex: number, newValue: number): ShadowToken;
    /** Creates a new shadow token with updated .type value */
    shadowTokenByUpdatingType(token: ShadowToken, layerIndex: number, newValue: ShadowType): ShadowToken;
    /** Creates a new gradient token with updated .to value */
    gradientTokenByUpdatingTo(token: GradientToken, layerIndex: number, newValue: {
        x: number;
        y: number;
    }): GradientToken;
    /** Creates a new gradient token with updated .from value */
    gradientTokenByUpdatingFrom(token: GradientToken, layerIndex: number, newValue: {
        x: number;
        y: number;
    }): GradientToken;
    /** Creates a new gradient token with updated .to value */
    gradientTokenByUpdatingType(token: GradientToken, layerIndex: number, newValue: GradientType): GradientToken;
    /** Creates a new gradient token with updated .aspectRatio value */
    gradientTokenByUpdatingAspectRatio(token: GradientToken, layerIndex: number, newValue: number): GradientToken;
    /** Creates a new gradient token with updated .to value */
    gradientTokenByUpdatingStops(token: GradientToken, layerIndex: number, newValue: Array<{
        position: number;
        color: ColorTokenValue | ColorToken;
    }>): GradientToken;
    /** Creates a new token where value is reference to the provided token. Token and reference must be of the same type */
    tokenByReferencing<T extends AnyToken>(token: T, reference: T): T;
    /** Creates a new multilayer token where one of the layers is reference to the provided token. Token and reference must be of the same type */
    multilayerTokenByReferencing<T extends AnyMultiLayerToken, R extends T>(token: T, layerIndex: number, reference: R): T;
    /** Creates a new token where value is raw, but taken from the previously referenced token. Token must have had reference before */
    tokenByDisconnectingReference<T extends AnySingleLayerToken>(token: T): T;
    /** Creates a new multilayer token where one of the layers value is raw, but taken from the previously referenced token. That layer must have had reference before */
    multilayerTokenByDisconnectingReference<T extends AnySingleLayerToken>(token: T, layerIndex: number): T;
    /** Checks if token as a whole is a reference to another token */
    isReferencedToken(token: AnySingleLayerToken): boolean;
    /** Checks if a token layer of multilayer token is a reference to another token */
    isReferencedMultilayerTokenLayer(token: AnyMultiLayerToken, layerIndex: number): boolean;
    /** Checks if a token was imported from some foreign source. Not imported tokens were always created in Supernova */
    isTokenImported(token: AnyToken): boolean;
}
