import { DesignSystem, DesignSystemSwitcher } from "../../model/base/SDKDesignSystem";
import { CustomDomain } from "../../model/support/SDKCustomDomain";
import { DataCore } from "../data/SDKDataCore";
export declare class AreaDesignSystems {
    /** Internal: Engine */
    private dataCore;
    constructor(dataCore: DataCore);
    /** Fetches all design systems belonging to the workspace
     * @param workspaceId - Workspace to fetch from
     * @returns All design systems in the specified version
     */
    designSystems(workspaceId: string): Promise<Array<DesignSystem>>;
    /** Fetches a specific design system by its id
     * @param designSystemId - Design system to fetch
     * @returns Design system with the specified id
     */
    designSystem(designSystemId: string): Promise<DesignSystem | null>;
    /** Retrieves custom domain information for a design system
     * @param designSystemId - ID of the design system
     * @returns custom domain information
     */
    designSystemCustomDomain(designSystemId: string): Promise<CustomDomain>;
    /** Creates a new design system and retrieves the newly created DS object
     * @param name - Name of the design system
     * @returns Newly created design system object
     */
    createDesignSystem(workspaceId: string, name: string, description?: string): Promise<DesignSystem>;
    /** Updates design system metadata for a specific design system
     * @param designSystemId - ID of the design system
     * @param name - New DS name
     * @param description - New DS description
     * @returns Nothing
     */
    updateDesignSystemMetadata(designSystemId: string, name: string, description?: string): Promise<void>;
    /** Enabled or disables multibrand functionality for a specific design system
     * @param designSystem - design system to update
     * @param isMultibrand - Multibrand functionality enabled or disabled
     * @returns Nothing
     */
    updateDesignSystemIsMultibrand(designSystem: DesignSystem, isMultibrand: boolean): Promise<void>;
    /** Enabled or disables multibrand functionality for a specific design system
     * @param designSystem - design system to update
     * @param designSystemSwitcher - Design system switcher options
     * @returns Nothing
     */
    updateDesignSystemSwitcher(designSystem: DesignSystem, designSystemSwitcher: DesignSystemSwitcher): Promise<void>;
    /** Enabled or disables multibrand functionality for a specific design system
     * @param designSystem - design system to update
     * @param docExporterId - Design system doc exporter id
     * @returns Nothing
     */
    updateDesignSystemDocExporterId(designSystem: DesignSystem, docExporterId: string): Promise<void>;
    /** Changes documentation slug for design system
     * @param designSystem - design system to update
     * @param docUserSlug - Documentation slug
     * @returns Nothing
     */
    updateDesignSystemDocumentationSlug(designSystem: DesignSystem, docUserSlug: string): Promise<void>;
    /** Updates custom domain of a specific design system
     * @param designSystemId - ID of the design system
     * @param newDomain - new custom domain
     * @returns nothing
     */
    updateDesignSystemCustomDomain(designSystemId: string, newDomain: string): Promise<CustomDomain>;
    /** Deletes a design system. This action is irreversible, all data will be lost, and can only be performed by the admins of the workspace
     * @param designSystemId - ID of the design system
     * @returns Nothing. RIP design system.
     */
    deleteDesignSystem(designSystemId: string): Promise<void>;
    /** Deletes custom domain
     * @param designSystemId - ID of the design system
     * @returns nothing
     */
    deleteDesignSystemCustomDomain(designSystemId: string): Promise<void>;
}
