type DataBridgeRequestHookResult = {
    skipDefaultAuth?: boolean;
};
export type DataBridgeRequestHook = (request: any) => void | DataBridgeRequestHookResult | Promise<void | DataBridgeRequestHookResult>;
export type DebugResponseObserver = (info: {
    requestUrl: string;
    response: any;
    executionTime: number;
    error?: Error;
}) => void;
export type DebugRequestObserver = (info: {
    requestUrl: string;
    requestMethod: string;
}) => void;
export type DataBridgeConfiguration = {
    apiUrl: string;
    apiVersion: string;
    accessToken: string;
    target: string | null;
    bypassEnvFetch: boolean;
    requestHook: DataBridgeRequestHook | null;
    debugRequestObserver?: DebugRequestObserver | null;
    debugResponseObserver?: DebugResponseObserver | null;
};
export declare class DataBridge {
    authToken: string;
    apiUrl: string;
    apiVersion: string;
    target: string | null;
    bypassEnvFetch: boolean;
    requestHook: DataBridgeRequestHook | null;
    debugRequestObserver: DebugRequestObserver | null;
    debugResponseObserver: DebugResponseObserver | null;
    constructor(conf: DataBridgeConfiguration);
    delete(endpoint: string): Promise<any>;
    get(endpoint: string): Promise<any>;
    put(endpoint: string, payload: any | null): Promise<any>;
    post(endpoint: string, payload: any | null): Promise<any>;
    upload(endpoint: string, fileKey: string, file: File): Promise<any>;
    private request;
    private handleResponse;
    private buildRequestConfig;
    getBaseEndpoint(fragment: string | null): string;
    getPublicEndpoint(fragment: string): string;
    getAclEndpoint(resource?: string): string;
    getUserEndpoint(userId: string, fragment: string | null): string;
    getWorkspaceEndpoint(wsId: string, fragment: string | null): string;
    getDesignSystemEndpoint(dsId: string, fragment: string | null): string;
    getVersionEndpoint(dsId: string, dsVersionId: string, fragment: string | null): string;
}
export {};
