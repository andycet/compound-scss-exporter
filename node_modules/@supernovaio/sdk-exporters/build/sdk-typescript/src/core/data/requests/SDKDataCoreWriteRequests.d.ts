import { Brand, BrandRemoteModel, BrandUpdateModel } from "../../../model/base/SDKBrand";
import { DesignSystem, DesignSystemRemoteModel, DesignSystemSwitcher } from "../../../model/base/SDKDesignSystem";
import { DesignSystemVersionRemoteModel, DesignSystemVersionUpdateModel } from "../../../model/base/SDKDesignSystemVersion";
import { DocumentationLegacyModel } from "../../../model/base/SDKDocumentationLegacy";
import { Component, ComponentRemoteModel, ComponentUpdateRemoteModel } from "../../../model/components/SDKComponent";
import { DocumentationLegacyGroup, DocumentationLegacyGroupModel } from "../../../model/documentation/SDKDocumentationLegacyGroup";
import { DocumentationLegacyPageModel } from "../../../model/documentation/SDKDocumentationLegacyPage";
import { ElementDataViewColumnType } from "../../../model/elements/SDKElementDataViewColumn";
import { ElementPropertyRemoteModel } from "../../../model/elements/SDKElementProperty";
import { DocumentationEnvironment } from "../../../model/enums/SDKDocumentationEnvironment";
import { ComponentGroup, ComponentGroupRemoteModel } from "../../../model/groups/SDKComponentGroup";
import { TokenGroup, TokenGroupRemoteModel } from "../../../model/groups/SDKTokenGroup";
import { ImportJobRemoteModel } from "../../../model/jobs/SDKImportJob";
import { CustomDomainRemoteModel } from "../../../model/support/SDKCustomDomain";
import { SourceRemoteModel } from "../../../model/support/SDKSource";
import { TokenThemeRemoteModel } from "../../../model/themes/SDKTokenTheme";
import { TokenRemoteModel } from "../../../model/tokens/remote/SDKRemoteTokenModel";
import { Token } from "../../../model/tokens/SDKToken";
import { UserProfileUpdateModel } from "../../../model/users/SDKUserProfile";
import { WorkspaceRemoteModel } from "../../../model/workspaces/SDKWorkspace";
import { WorkspaceIPWhitelistSettingsUpdateModel } from "../../../model/workspaces/SDKWorkspaceIPWhitelistSettings";
import { WorkspaceNPMRegistrySettingsUpdateModel } from "../../../model/workspaces/SDKWorkspaceNPMRegistrySettings";
import { WorkspaceOnboardingUpdateModel } from "../../../model/workspaces/SDKWorkspaceOnboarding";
import { WorkspaceProfileUpdateModel } from "../../../model/workspaces/SDKWorkspaceProfile";
import { WorkspaceSSOSettingsUpdateModel } from "../../../model/workspaces/SDKWorkspaceSSOSettings";
import { DataBridge } from "../SDKDataBridge";
export declare class DataCoreWriteRequests {
    private bridge;
    constructor(bridge: DataBridge);
    /** Remote: Deletes the user by id. Can only really delete its own user */
    deleteRemoteUser(userId: string): Promise<void>;
    /** Remote: Checks whether user can be deleted or not. Can only really check its own user */
    canDeleteRemoteUser(userId: string): Promise<boolean>;
    /** Remote: Updates the user profile of specified user. This call can only be used on the user who is authenticated with the token */
    updateRemoteUserProfile(profile: UserProfileUpdateModel, userId: string): Promise<void>;
    /** Remote: Updates the avatar of the current user */
    updateRemoteUserAvatar(userId: string, avatar: File): Promise<void>;
    /** Remote: Updates the avatar of the current user */
    deleteRemoteUserAvatar(userId: string): Promise<void>;
    /** Remote: Logs out user. Can only really logout its own user */
    logoutRemoteCurrentUser(): Promise<void>;
    /** Remote: Creates a new workspace */
    createRemoteWorkspace(name: string, handle?: string): Promise<WorkspaceRemoteModel>;
    /** Remote: Creates a new version */
    createRemoteVersion(designSystemId: string, model: DesignSystemVersionUpdateModel): Promise<DesignSystemVersionRemoteModel>;
    /** Remote: Updates a version */
    updateRemoteVersion(designSystemId: string, versionId: string, model: DesignSystemVersionUpdateModel): Promise<void>;
    /** Remote: Deletes a version */
    deleteRemoteVersion(designSystemId: string, versionId: string): Promise<void>;
    /** Remote: Creates a new brand */
    createRemoteBrand(designSystemId: string, versionId: string, model: BrandUpdateModel): Promise<BrandRemoteModel>;
    /** Remote: Updates a brand */
    updateRemoteBrand(designSystemId: string, versionId: string, brandId: string, brand: Brand): Promise<void>;
    /** Remote: Deletes a brand */
    deleteRemoteBrand(designSystemId: string, versionId: string, brandId: string): Promise<void>;
    /** Remote: Updates custom domain */
    updateRemoteCustomDomain(designSystemId: string, customerDomain: string): Promise<CustomDomainRemoteModel>;
    /** Remote: Deletes custom domain */
    deleteRemoteCustomDomain(designSystemId: string): Promise<void>;
    /** Remote: Updates a workspace profile */
    updateRemoteWorkspaceProfile(workspaceId: string, profile: WorkspaceProfileUpdateModel): Promise<void>;
    testIpWhitelistSettings(workspaceId: string, ipWhitelistSettings: WorkspaceIPWhitelistSettingsUpdateModel): Promise<{
        accessible: boolean;
    }>;
    /** Remote: Updates a workspace avatar */
    updateRemoteWorkspaceAvatar(workspaceId: string, avatar: File): Promise<void>;
    /** Remote: Updates a workspace onboarding */
    updateRemoteWorkspaceOnboarding(workspaceId: string, onboarding: WorkspaceOnboardingUpdateModel): Promise<void>;
    /** Remote: Updates a workspace SSO settings */
    updateRemoteWorkspaceSSOSettings(workspaceId: string, ssoSettings: WorkspaceSSOSettingsUpdateModel): Promise<void>;
    /** Remote: Updates a workspace IP whitelist settings */
    updateRemoteWorkspaceIPWhitelistSettings(workspaceId: string, ipWhitelistSettings: WorkspaceIPWhitelistSettingsUpdateModel): Promise<void>;
    /** Remote: Updates a workspace NPM registry settings */
    updateRemoteWorkspaceNPMRegistrySettings(workspaceId: string, npmRegistrySettings: WorkspaceNPMRegistrySettingsUpdateModel): Promise<void>;
    /** Remote: Deletes a workspace */
    deleteRemoteWorkspace(workspaceId: string): Promise<void>;
    /** Remote: Deletes a workspace avatar */
    deleteRemoteWorkspaceAvatar(workspaceId: string): Promise<void>;
    /** Remote: Deletes a workspace NPM settings */
    deleteRemoteWorkspaceNPMRegistrySettings(workspaceId: string): Promise<void>;
    /** Remote: Creates a new design system */
    createRemoteDesignSystem(workspaceId: string, name: string, description?: string): Promise<DesignSystemRemoteModel>;
    /** Remote: Updates a design system metadata */
    updateRemoteDesignSystemMetadata(designSystemId: string, name: string, description?: string): Promise<void>;
    /** Remote: Updates a design system multibrand capabilities */
    updateRemoteDesignSystemIsMultibrand(designSystem: DesignSystem, isMultibrand: boolean): Promise<void>;
    /** Remote: Updates a design system switcher */
    updateRemoteDesignSystemSwitcher(designSystem: DesignSystem, designSystemSwitcher: DesignSystemSwitcher): Promise<void>;
    /** Remote: Updates design system doc exporter id */
    updateRemoteDesignSystemDocExporterId(designSystem: DesignSystem, docExporterId: string): Promise<void>;
    /** Remote: Update documentation structure */
    updateRemoteDocumentationStructure(designSystemId: string, versionId: string, model: DocumentationLegacyModel): Promise<void>;
    /** Remote: Updates a design system documentation slug */
    updateRemoteDesignSystemDocumentationSlug(designSystem: DesignSystem, docUserSlug: string): Promise<void>;
    /** Remote: Deletes a design system */
    deleteDesignSystem(designSystemId: string): Promise<void>;
    /** Remote: create a page within documentation */
    createRemoteDocumentationPage(designSystemId: string, versionId: string, data: object): Promise<{
        page: DocumentationLegacyPageModel;
    }>;
    /** Remote: create a group within documentation */
    createRemoteDocumentationGroup(designSystemId: string, versionId: string, payload: object): Promise<{
        group: DocumentationLegacyGroupModel;
    }>;
    /** Remote: update a documentation page */
    updateRemoteDocumentationPageOrTab(designSystemId: string, versionId: string, pageModel: any): Promise<{
        result: {
            page: DocumentationLegacyPageModel;
        };
    }>;
    /** Remote: updates a documentation group */
    updateRemoteDocumentationGroup(designSystemId: string, versionId: string, groupModel: any): Promise<{
        result: {
            group: DocumentationLegacyGroupModel;
        };
    }>;
    /** Remote: creates a duplicate of a documentation page */
    duplicateRemoteDocumentationPageOrTab(designSystemId: string, versionId: string, idInVersion: string, persistentId: string): Promise<DocumentationLegacyPageModel>;
    /** Remote: deletes a documentation page */
    deleteRemoteDocumentationPage(designSystemId: string, versionId: string, idInVersion: string): Promise<void>;
    /** Remote: Ungroups a documentation group */
    ungroupRemoteDocumentationGroup(designSystemId: string, versionId: string, groupId: any): Promise<void>;
    /** Remote: Deletes a documentation group */
    deleteRemoteDocumentationGroup(designSystemId: string, versionId: string, group: DocumentationLegacyGroup): Promise<void>;
    /** Remote: Deletes a documentation group and its contents */
    deleteRemoteDocumentationGroupAndTree(designSystemId: string, versionId: string, group: DocumentationLegacyGroup): Promise<void>;
    publishDocumentation(workspaceId: string, designSystemId: string, versionId: string, environment: DocumentationEnvironment): Promise<{
        status: "Queued" | "InProgress" | "Failure";
        jobId: string;
        exporterId: string;
    }>;
    createRemoteToken(designSystemId: string, versionId: string, token: TokenRemoteModel): Promise<TokenRemoteModel>;
    updateRemoteToken(designSystemId: string, versionId: string, token: TokenRemoteModel): Promise<TokenRemoteModel>;
    createRemoteTokenGroup(designSystemId: string, versionId: string, group: TokenGroupRemoteModel): Promise<TokenGroupRemoteModel>;
    updateRemoteTokenGroup(designSystemId: string, versionId: string, group: TokenGroupRemoteModel): Promise<void>;
    deleteRemoteToken(designSystemId: string, versionId: string, tokenId: string): Promise<void>;
    ungroupRemoteTokenGroup(designSystemId: string, versionId: string, tokenGroupId: string): Promise<void>;
    createRemoteTokenTheme(designSystemId: string, versionId: string, theme: TokenThemeRemoteModel): Promise<TokenThemeRemoteModel>;
    updateRemoteTokenTheme(designSystemId: string, versionId: string, group: TokenThemeRemoteModel): Promise<void>;
    deleteRemoteTokenTheme(designSystemId: string, versionId: string, themeId: string): Promise<void>;
    writeTokenData(designSystemId: string, versionId: string, tokens: Array<TokenRemoteModel>, groups: Array<TokenGroupRemoteModel>, deleteTokens: Array<Token>, deleteTokenGroups: Array<TokenGroup>): Promise<void>;
    writeTokenThemeData(designSystemId: string, versionId: string, theme: TokenThemeRemoteModel): Promise<void>;
    updateTokenPropertyValue(designSystemId: string, versionId: string, newValue: string | boolean | number, tokenId: string, propertyId: string): Promise<void>;
    deleteTokenPropertyValue(designSystemId: string, versionId: string, valueId: string): Promise<void>;
    createTokenProperty(designSystemId: string, versionId: string, model: object): Promise<ElementPropertyRemoteModel>;
    updateTokenProperty(designSystemId: string, versionId: string, propertyIdInVersion: string, model: object): Promise<void>;
    deleteTokenProperty(designSystemId: string, versionId: string, propertyId: string): Promise<void>;
    updateReorderTokenColumn(designSystemId: string, versionId: string, viewId: string, columnId: string, newIndex: number): Promise<void>;
    updateResizeTokenColumn(designSystemId: string, versionId: string, viewId: string, columnType: ElementDataViewColumnType, columnId: string, columnThemeId: string | undefined, columnBasePropertyType: string | undefined, columnPropertyDefinitionId: string | undefined, newWidth: number): Promise<void>;
    createRemoteComponent(designSystemId: string, versionId: string, component: ComponentRemoteModel): Promise<ComponentRemoteModel>;
    updateRemoteComponent(designSystemId: string, versionId: string, component: ComponentUpdateRemoteModel): Promise<ComponentRemoteModel>;
    createRemoteComponentGroup(designSystemId: string, versionId: string, group: ComponentGroupRemoteModel): Promise<ComponentGroupRemoteModel>;
    updateRemoteComponentGroup(designSystemId: string, versionId: string, group: ComponentGroupRemoteModel): Promise<void>;
    deleteRemoteComponent(designSystemId: string, versionId: string, componentId: string): Promise<void>;
    ungroupRemoteComponentGroup(designSystemId: string, versionId: string, componentGroupId: string): Promise<void>;
    writeComponentData(designSystemId: string, versionId: string, components: Array<ComponentRemoteModel>, groups: Array<ComponentGroupRemoteModel>, deleteComponents: Array<Component>, deleteComponentGroups: Array<ComponentGroup>): Promise<void>;
    updateComponentPropertyValue(designSystemId: string, versionId: string, newValue: string | boolean | number, componentId: string, propertyId: string): Promise<void>;
    deleteComponentPropertyValue(designSystemId: string, versionId: string, valueId: string): Promise<void>;
    createComponentProperty(designSystemId: string, versionId: string, model: object): Promise<ElementPropertyRemoteModel>;
    updateComponentProperty(designSystemId: string, versionId: string, propertyIdInVersion: string, model: object): Promise<void>;
    deleteComponentProperty(designSystemId: string, versionId: string, propertyId: string): Promise<void>;
    updateReorderComponentColumn(designSystemId: string, versionId: string, viewId: string, columnId: string, newIndex: number): Promise<void>;
    updateResizeComponentColumn(designSystemId: string, versionId: string, viewId: string, columnType: ElementDataViewColumnType, columnId: string, columnThemeId: string | undefined, columnBasePropertyType: string | undefined, columnPropertyDefinitionId: string | undefined, newWidth: number): Promise<void>;
    /** Remote: Deletes a OAuth integration */
    deleteOAuthIntegration(userId: string, service: "figma" | "bitbucket" | "github" | "gitlab" | "azure"): Promise<void>;
    /** Remote: Delete pipeline */
    deleteRemotePipeline(workspaceId: string, pipelineId: string): Promise<void>;
    /** Remote: Schedules import job */
    scheduleImportJobForFigmaSources(designSystemId: string, versionId: string, sourceIds: Array<string>, dryRun: boolean): Promise<ImportJobRemoteModel>;
    /** Remote: Deletes a remote data source */
    deleteRemoteSource(designSystemId: string, sourceId: string): Promise<void>;
    linkFigmaSource(designSystemId: string, data: object): Promise<SourceRemoteModel>;
    updateFigmaSource(designSystemId: string, sourceId: string, data: object): Promise<SourceRemoteModel>;
    updateFigmaSourceClaimOwnership(designSystemId: string, sourceId: string): Promise<SourceRemoteModel>;
    writeTokenStudioJSONData(designSystemId: string, versionId: string, data: object): Promise<boolean>;
    importTokens(designSystemId: string, brandId: string, sourceId: string, sourceName: string, sourceType: "FigmaVariablesPlugin", payload: any): Promise<any>;
}
