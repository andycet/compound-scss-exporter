import { AclRemoteModel } from "../../../model/acl/SDKAcl";
import { BrandRemoteModel } from "../../../model/base/SDKBrand";
import { DesignSystemRemoteModel } from "../../../model/base/SDKDesignSystem";
import { DesignSystemVersionRemoteModel } from "../../../model/base/SDKDesignSystemVersion";
import { DocumentationLegacyModel } from "../../../model/base/SDKDocumentationLegacy";
import { ComponentRemoteModel } from "../../../model/components/SDKComponent";
import { DesignComponentRemoteModel } from "../../../model/components/SDKDesignComponent";
import { DocumentationLegacyGroupModel } from "../../../model/documentation/SDKDocumentationLegacyGroup";
import { DocumentationLegacyPageModel } from "../../../model/documentation/SDKDocumentationLegacyPage";
import { ElementDataViewRemoteModel } from "../../../model/elements/SDKElementDataView";
import { ElementPropertyRemoteModel } from "../../../model/elements/SDKElementProperty";
import { ElementPropertyValueRemoteModel } from "../../../model/elements/values/SDKElementPropertyValue";
import { DocumentationEnvironment } from "../../../model/enums/SDKDocumentationEnvironment";
import { TokenType } from "../../../model/enums/SDKTokenType";
import { ExporterCustomBlockModel } from "../../../model/exporters/custom_blocks/SDKExporterCustomBlock";
import { ExporterModel } from "../../../model/exporters/SDKExporter";
import { PipelineModel } from "../../../model/exporters/SDKPipeline";
import { ComponentGroupRemoteModel } from "../../../model/groups/SDKComponentGroup";
import { DesignComponentGroupRemoteModel } from "../../../model/groups/SDKDesignComponentGroup";
import { TokenGroupRemoteModel } from "../../../model/groups/SDKTokenGroup";
import { ImportJobRemoteModel } from "../../../model/jobs/SDKImportJob";
import { MembershipRemoteModel } from "../../../model/membership/SDKMembership";
import { CustomDomainRemoteModel } from "../../../model/support/SDKCustomDomain";
import { SourceRemoteModel } from "../../../model/support/SDKSource";
import { TokenThemeRemoteModel } from "../../../model/themes/SDKTokenTheme";
import { TokenRemoteModel } from "../../../model/tokens/remote/SDKRemoteTokenModel";
import { UserRemoteModel } from "../../../model/users/SDKUser";
import { UserMembershipRemoteModel } from "../../../model/users/SDKUserMembership";
import { WorkspaceRemoteModel } from "../../../model/workspaces/SDKWorkspace";
import { WorkspaceIPWhitelistSettingsRemoteModel } from "../../../model/workspaces/SDKWorkspaceIPWhitelistSettings";
import { WorkspaceNPMRegistrySettingsRemoteModel } from "../../../model/workspaces/SDKWorkspaceNPMRegistrySettings";
import { WorkspaceOnboardingRemoteModel } from "../../../model/workspaces/SDKWorkspaceOnboarding";
import { SubscriptionProductFeaturesRemoteModel } from "../../../model/workspaces/SDKWorkspaceProductFeatures";
import { WorkspaceSSOSettingsRemoteModel } from "../../../model/workspaces/SDKWorkspaceSSOSettings";
import { DataBridge } from "../SDKDataBridge";
export declare class DataCoreReadRequests {
    private bridge;
    constructor(bridge: DataBridge);
    /** Remote: Get information about currently logged in user */
    getRemoteCurrentUser(): Promise<UserRemoteModel>;
    /** Remote: Get information about a specific user */
    getRemoteUser(userId: any): Promise<UserRemoteModel>;
    /** Remote: Get information about all workspaces user can access */
    getRemoteMemberships(userId: string): Promise<Array<MembershipRemoteModel>>;
    getRemoteSubscriptionProductFeatures(): Promise<SubscriptionProductFeaturesRemoteModel>;
    getRemoteAcls(): Promise<AclRemoteModel>;
    /** Remote: Get information about a specific workspace */
    getRemoteWorkspaceDetail(workspaceId: string): Promise<WorkspaceRemoteModel>;
    /** Remote: Validate can use workspace handle */
    getRemoteIsWorkspaceHandleAvailable(handle: string): Promise<boolean>;
    /** Remote: Get all users memberships */
    getRemoteUserMemberships(workspaceId: string): Promise<Array<UserMembershipRemoteModel>>;
    /** Remote: Get information about the state of workspace onboarding, what was completed and what not */
    getRemoteWorkspaceOnboarding(workspaceId: string): Promise<WorkspaceOnboardingRemoteModel | null>;
    /** Remote: Get information about the workspace IP whitelisting configuration */
    getRemoteWorkspaceIPWhitelistSettings(workspaceId: string): Promise<WorkspaceIPWhitelistSettingsRemoteModel | null>;
    getRemoteWorkspaceNPMRegistrySettings(workspaceId: string): Promise<WorkspaceNPMRegistrySettingsRemoteModel | null>;
    getRemoteWorkspaceSSOSettings(workspaceId: string): Promise<WorkspaceSSOSettingsRemoteModel | null>;
    /** Remote: Get information about one specific design system */
    getRemoteDesignSystem(designSystemId: string): Promise<DesignSystemRemoteModel>;
    /** Remote: Get information about all design systems under specific workspace */
    getRemoteDesignSystems(workspaceId: string): Promise<Array<DesignSystemRemoteModel>>;
    /** Remote: Get custom domain */
    getRemoteCustomDomain(designSystemId: string): Promise<CustomDomainRemoteModel>;
    /** Remote: Get a single design source */
    getRemoteSource(designSystemId: string, sourceId: string): Promise<SourceRemoteModel>;
    /** Remote: Get all design sources of a single design system */
    getRemoteSources(designSystemId: string): Promise<Array<SourceRemoteModel>>;
    /** Remote: Get design system documentation url */
    getRemoteDocumentationUrl(designSystemId: string, versionId: string): Promise<string | null>;
    /** Remote: Get documentation metadata */
    getRemoteDocumentationStructure(designSystemId: string, versionId: string): Promise<DocumentationLegacyModel>;
    /** Remote: Get content of the documentation - groups and pages */
    getRemoteDocumentationItems(designSystemId: string, versionId: string): Promise<{
        groups: Array<DocumentationLegacyGroupModel>;
        pages: Array<DocumentationLegacyPageModel>;
    }>;
    /** Remote: Get custom blocks for currently installed documentation exporter under specific ds */
    getRemoteExporterCustomBlocks(designSystemId: string, versionId: string): Promise<Array<ExporterCustomBlockModel>>;
    /** Remote: Get user configuration of specific installed exporter */
    getRemoteExporterConfigurationUserSpecifiedValues(designSystemId: string, exporterId: string): Promise<Array<{
        key: string;
        value: any;
    }>>;
    /** Remote: Get structural details and metadata about specific installed exporter */
    getRemoteExporter(workspaceId: string, exporterId: string): Promise<ExporterModel>;
    /** Remote: Get structural details and metadata about all exporters */
    getRemoteExporters(workspaceId: string): Promise<Array<ExporterModel>>;
    /** Remote: Get all tokens from all categories */
    getRemoteTokens(designSystemId: string, versionId: string, filter?: {
        type?: TokenType;
        brandId?: string;
    }): Promise<Array<TokenRemoteModel>>;
    /** Remote: Get all token groups from all categories */
    getRemoteTokenGroups(designSystemId: string, versionId: string, filter?: {
        brandId?: string;
    }): Promise<Array<TokenGroupRemoteModel>>;
    /** Remote: Get all token themes from all categories */
    getRemoteTokenThemes(designSystemId: string, versionId: string): Promise<Array<TokenThemeRemoteModel>>;
    /** Remote: Get usage of the token across design system */
    getRemoteTokenUsage(designSystemId: string, versionId: string, tokenId: string): Promise<{
        tokens: Array<TokenRemoteModel>;
        components: Array<DesignComponentRemoteModel>;
        documentationPages: Array<DocumentationLegacyPageModel>;
    }>;
    /** Remote: Get all supernova-type components (note: Not design components, those have separate endpoints) */
    getRemoteComponents(designSystemId: string, versionId: string): Promise<Array<ComponentRemoteModel>>;
    /** Remote: Get all component groups */
    getRemoteComponentGroups(designSystemId: string, versionId: string): Promise<Array<ComponentGroupRemoteModel>>;
    /** Remote: Get design components (right now, those are only components coming from Figma) */
    getRemoteDesignComponents(designSystemId: string, versionId: string): Promise<Array<DesignComponentRemoteModel>>;
    /** Remote: Get design component groups (right now, those are only components coming from Figma) */
    getRemoteDesignComponentGroups(designSystemId: string, versionId: string): Promise<Array<DesignComponentGroupRemoteModel>>;
    /** Remote: Get assets (right now, those are only components coming from Figma, but this will change in the future) */
    getRemoteAssets(designSystemId: string, versionId: string): Promise<Array<DesignComponentRemoteModel>>;
    /** Remote: Get design component groups (right now, those are only components coming from Figma, but this will change in the future) */
    getRemoteAssetGroups(designSystemId: string, versionId: string): Promise<Array<DesignComponentGroupRemoteModel>>;
    getRemoteElementPropertyDefinitions(designSystemId: string, versionId: string): Promise<Array<ElementPropertyRemoteModel>>;
    /** Remote: Get definitions of all element data views. This fetches element views for all types of elements, ie. tokens, components, assets etc. */
    getRemoteElementDataViewDefinitions(designSystemId: string, versionId: string): Promise<Array<ElementDataViewRemoteModel>>;
    /** Remote: Get all property values that were set by the user for each elemen */
    getRemoteElementPropertyValues(designSystemId: string, versionId: string): Promise<ElementPropertyValueRemoteModel[]>;
    getRemotePipelines(workspaceId: string): Promise<PipelineModel[]>;
    getRemoteDocumentationBuilds(workspaceId: string, designSystemId: string, versionId: string, environment: DocumentationEnvironment, limit?: number): Promise<Array<{
        status: "InProgress" | "Success" | "Failed";
        id: string | null;
        exporterId: string | null;
    }>>;
    getBrands(designSystemId: string, versionId: string): Promise<Array<BrandRemoteModel>>;
    getBrand(designSystemId: string, versionId: string, brandId: string): Promise<BrandRemoteModel>;
    getOAuthURL(service: "figma" | "bitbucket" | "github" | "gitlab" | "azure"): Promise<string>;
    getVersion(designSystemId: string, versionId: string): Promise<DesignSystemVersionRemoteModel>;
    getVersions(designSystemId: string): Promise<Array<DesignSystemVersionRemoteModel>>;
    getImportJobs(designSystemId: string, versionId: string): Promise<Array<ImportJobRemoteModel>>;
    getImportJob(designSystemId: string, versionId: string, jobId: string): Promise<ImportJobRemoteModel>;
    getTokenStudioData(designSystemId: string, versionId: string): Promise<object>;
}
