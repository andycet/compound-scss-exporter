import { AnyDimensionTokenValue, AnyOptionTokenValue, AnyStringTokenValue, BlurTokenValue, BorderTokenValue, ColorTokenValue, GradientTokenValue, ShadowTokenValue, TypographyTokenValue } from "../../model/tokens/SDKTokenValue";
import { ColorToken } from "../../model/tokens/SDKColorToken";
import { Token } from "../../model/tokens/SDKToken";
/** Token data transformer. Use for direct representation of token to other representations, such as CSS, rgb etc. More transformers will be added over time */
export declare class TokenTransform {
    /** Converts a single token to CSS definition. Values are always resolved to plain values, references to other tokens are not yet supported */
    tokenToCSS(token: Token): string;
    /** Converts token to appropriate css variable definition --(name): css_definition */
    tokenToCSSVariableDeclaration(token: Token, variableName: string): string;
    /** Converts color token value to css definition */
    colorTokenToCSS(value: ColorTokenValue): string;
    /** Converts border token value to css definition */
    borderTokenToCSS(value: BorderTokenValue): string;
    /** Converts shadow token value to css definition */
    shadowsTokenToCSS(value: ShadowTokenValue[]): string;
    shadowTokenToCSS(value: ShadowTokenValue): string;
    /** Converts typography token value to css definition */
    typographyTokenToCSS(value: TypographyTokenValue): string;
    /** Converts border token value to css definition */
    blurTokenToCSS(value: BlurTokenValue): string;
    /** Converts border token value to css definition */
    dimensionTokenToCSS(value: AnyDimensionTokenValue): string;
    private unitToCSS;
    gradientsTokenToCSS(value: GradientTokenValue[]): string;
    /** Converts gradient token value to css definition */
    gradientTokenToCSS(value: GradientTokenValue): string;
    /** Converts generic token value to css definition */
    stringTokenToCSS(value: AnyStringTokenValue): string;
    optionTokenToCSS(value: AnyOptionTokenValue): string;
    /** Converts a single color token to #hheexx or #hheexxaa */
    colorTokenToHEXorHEXA(colorToken: ColorToken): string;
    /** Converts a single color token to rgba(x,x,x,x)  */
    colorTokenToRGBA(colorToken: ColorToken): string;
    /** Converts a single color token to rgba(x,x,x,x) with relative values */
    colorTokenToPercenageRGBA(colorToken: ColorToken): string;
    /** Converts a single color token to hsla(x,x,x,x) */
    colorTokenToHSLA(colorToken: ColorToken): string;
    /** Converts a single color token to hsva(x,x,x,x) */
    colorTokenToHSVA(colorToken: ColorToken): string;
}
