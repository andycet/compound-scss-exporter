export type TokenUtilPreviewTokenValueSegment = {
    value: string;
    referencedName?: string;
    prefersReferenceName?: boolean;
};
export type TokenUtilPreviewTokenType = "blur" | "border" | "borderWidth" | "color" | "copy" | "fontFamily" | "fontSize" | "fontWeight" | "dimension" | "duration" | "gradient" | "lineHeight" | "letterSpacing" | "opacity" | "paragraphSpacing" | "radius" | "shadow" | "size" | "space" | "string" | "textCase" | "textDecoration" | "typography" | "visibility" | "zIndex";
export type TokenUtilPreviewMetadata = {
    displayValue: string;
    referencedTo?: string;
    tokenType: TokenUtilPreviewTokenType;
} & ({
    meta?: null;
} | TokenUtilPreviewShadowTokenPreview | TokenUtilPreviewTypographyTokenPreview | TokenUtilPreviewDimensionTokenPreview | TokenUtilPreviewBlurTokenPreview);
export type TokenUtilPreviewShadowTokenPreview = {
    meta: ShadowTokenMetadata;
};
export type TokenUtilPreviewTypographyTokenPreview = {
    meta: TypographyTokenMetadata;
};
export type TokenUtilPreviewDimensionTokenPreview = {
    meta: DimensionTokenMetadata;
};
export type TokenUtilPreviewBlurTokenPreview = {
    meta: BlurTokenMetadata;
};
export type TokenUtilPreviewResolvedStyle = {
    background?: string;
    blur?: string;
    borderStyle?: "solid" | "dashed" | "dotted";
    borderWidth?: string;
    borderColor?: string;
    borderRadius?: string;
    boxShadow?: string;
    fontFamily?: string;
    fontSize?: string;
    fontWeight?: string;
    letterSpacing?: string;
    lineHeight?: string;
    opacity?: string;
    textTransform?: string;
    textDecoration?: string;
    width?: string;
};
export type ShadowTokenMetadata = {
    x: number;
    y: number;
    type: "inner" | "drop";
};
export type TypographyTokenMetadata = {
    fontSize: DimensionTokenMetadata;
};
export type DimensionTokenMetadata = {
    value: number;
    unit: string;
};
export type BlurTokenMetadata = {
    type: "layer" | "background";
};
export type TokenUtilPreviewReferenceInfo = {
    alwaysShown: Array<TokenUtilPreviewReferenceInfoPiece>;
    optionallyShown: Array<TokenUtilPreviewReferenceInfoPiece>;
};
export type TokenUtilPreviewReferenceInfoPiece = {
    key?: Array<TokenUtilPreviewTokenValueSegment>;
    value?: Array<TokenUtilPreviewTokenValueSegment>;
    icon?: string;
    fullWidth?: boolean;
};
