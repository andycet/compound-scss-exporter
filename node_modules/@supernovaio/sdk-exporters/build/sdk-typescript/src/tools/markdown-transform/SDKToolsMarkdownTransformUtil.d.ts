import { DocumentationLegacyPageBlockText } from "../../model/documentation/blocks/SDKDocumentationLegacyPageBlockText";
import { DocumentationLegacyRichText } from "../../model/documentation/SDKDocumentationLegacyRichText";
import { Token } from "../../model/tokens/SDKToken";
/** Markdown block transformer */
export declare class MarkdownTransformUtil {
    private tokenTransformer;
    constructor();
    /** Converts rich text block to markdown
     *
     * This is very naive implementation and will break in complicated cases, like double control characters of the same type next to each other
     * Must improve later with something more sophisticated, ideally tree builder with branched resolution.
     */
    convertTextBlockToMarkdown(block: DocumentationLegacyPageBlockText): string | null;
    /** Converts rich text to markdown
     *
     * This is very naive implementation and will break in complicated cases, like double control characters of the same type next to each other
     * Must improve later with something more sophisticated, ideally tree builder with branched resolution.
     */
    convertRichTextToMarkdown(richText: DocumentationLegacyRichText): string;
    /** Convert token to markdown representation */
    convertTokenToMarkdown(token: Token): string;
}
