import { TokenType } from "../../../model/enums/SDKTokenType";
import { Token } from "../../../model/tokens/SDKToken";
import { AnyToken } from "../../../model/tokens/SDKTokenValue";
import { DTProcessedTokenNode } from "./SDKDTJSONConverter";
/** Utility allowing resolution of token references */
export declare class DTTokenReferenceResolver {
    private mappedTokens;
    private nodes;
    replaceRefs(existingToken: AnyToken, newToken: AnyToken): void;
    addAtomicToken(token: DTProcessedTokenNode, indexOfNewNode: number): void;
    addAtomicTokens(tokens: Array<DTProcessedTokenNode>): void;
    unmappedValues(): Array<DTProcessedTokenNode>;
    tokensOfType(type: TokenType): Array<Token>;
    lookupReferencedToken(reference: string): Token | undefined;
    lookupReferencedNode(reference: string): DTProcessedTokenNode | undefined;
    lookupAllReferencedTokens(reference: string): Array<{
        token: Token;
        key: string;
        location: number;
        dollarTypeReference: boolean;
    }> | undefined;
    replaceAllReferencedTokens(reference: string, replacements: Array<{
        token: Token;
        key: string;
        location: number;
        dollarTypeReference: boolean;
    }>): string;
    replaceToken(base: string, token: Token, key: string, location: number, dollarTypeReference: boolean): string;
    replaceAt(s: string, what: string, replacement: string, index: number, dollarTypeReference: boolean): string;
    replacableValue(token: Token): string;
    isBalancedReference(syntax: string): boolean;
    valueHasReference(value: string | object | number): boolean;
    valueIsPureReference(value: string | object): boolean;
    hasSameNumberOfCharacters(str: string, char1: string, char2: string): boolean;
    countCharacter(str: string, char: string): number;
    tokenReferenceKey(path: Array<string>, name: string): string;
    findBracketStrings(str: string): {
        index: number;
        value: string;
        dollarTypeReference: boolean;
    }[];
    findDollarStrings(str: string): {
        index: number;
        value: string;
        dollarTypeReference: boolean;
    }[];
    isDollarIdentifier(value: string): boolean;
}
