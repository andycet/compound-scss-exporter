import { WorkspaceSubscriptionPlanInterval } from "../enums/SDKWorkspaceSubscriptionPlanInterval";
import { WorkspaceSubscriptionProduct } from "../enums/SDKWorkspaceSubscriptionProduct";
import { WorkspaceSubscriptionStatus } from "../enums/SDKWorkspaceSubscriptionStatus";
import { WorkspaceSubscriptionStatusInternal } from "../enums/SDKWorkspaceSubscriptionStatusInternal";
export type WorkspaceSubscriptionRemoteModel = {
    isSuspended: boolean;
    isPaid: boolean;
    isActive: boolean;
    subscriptionStatus: WorkspaceSubscriptionStatus;
    subscriptionStatusRecentlyUpdated: boolean;
    seatLimit: number;
    seats: number;
    product: WorkspaceSubscriptionProduct;
    planInterval: WorkspaceSubscriptionPlanInterval;
    planPriceId: string;
    hasStripeSubscription: boolean;
    internalStatus?: WorkspaceSubscriptionStatusInternal;
    stripeCustomerId?: string;
    stripeSubscriptionId?: string;
    card?: WorkspaceSubscriptionCardRemoteModel;
    currentPeriodStart?: string;
    currentPeriodEnd?: string;
    cancelAt?: string;
};
export type WorkspaceSubscriptionCardRemoteModel = {
    last4: string;
    expiryMonth: string;
    expiryYear: string;
    cardId?: string;
    brand?: string;
    name?: string;
};
export type WorkspaceSubscriptionTransportModel = WorkspaceSubscriptionRemoteModel;
export type WorkspaceSubscriptionUpdateModel = WorkspaceSubscriptionRemoteModel;
export declare class WorkspaceSubscription {
    /** Flags if this workspace already has subscription assigned to it */
    hasStripeSubscription: boolean;
    /** Main status of the workspace subscription */
    subscriptionStatus: WorkspaceSubscriptionStatus;
    /** If true - subscription was paid, but payment problem occurred and wasn't solved for specific period of time */
    isSuspended: boolean;
    /** Flags if this workspace has paid plan */
    isPaid: boolean;
    /** Flags if this workspace subscription is active (not cancelled, or suspended). Applies for paid subscriptions only */
    isActive: boolean;
    subscriptionStatusRecentlyUpdated: boolean;
    /** Maximum seats workspace can have assigned. This limits number of editors+ only, visitors are always unlimited */
    seatLimit: number;
    /** Current amount of seats workspace uses */
    seats: number;
    /** Subscription tier */
    product: WorkspaceSubscriptionProduct;
    /** Subscription cycle interval */
    planInterval: WorkspaceSubscriptionPlanInterval;
    /** Subscription price id */
    planPriceId: string;
    /** Internal status of the workspace subscription */
    internalStatus: WorkspaceSubscriptionStatusInternal | null;
    /** Starting date of the current billing cycle */
    currentPeriodStart: Date | null;
    /** Ending date of the current billing cycle */
    currentPeriodEnd: Date | null;
    /** Date of the cancellation of the current billing cycle */
    cancelAt: Date | null;
    /** Stripe customer ID. Note: visible only for Owner and Admin role */
    stripeCustomerId: string | null;
    /** Stripe subscription ID. Note: visible only for Owner and Admin role */
    stripeSubscriptionId: string | null;
    /** Card information. Note: visible only for Owner and Admin roles */
    card: {
        cardId: string | null;
        last4: string | null;
        expiryMonth: string | null;
        expiryYear: string | null;
        brand: string | null;
        name: string | null;
    } | null;
    constructor(model: WorkspaceSubscriptionRemoteModel);
    toRemote(): WorkspaceSubscriptionTransportModel;
    toTransport(): WorkspaceSubscriptionTransportModel;
    static fromTransport(model: WorkspaceSubscriptionTransportModel): WorkspaceSubscription;
}
