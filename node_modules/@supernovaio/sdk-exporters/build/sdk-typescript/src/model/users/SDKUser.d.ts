import { UserProfile, UserProfileRemoteModel, UserProfileTransportModel } from "./SDKUserProfile";
export type UserRemoteModel = {
    id: string;
    email: string;
    createdAt: string;
    profile: UserProfileRemoteModel;
    linkedIntegrations?: LinkedIntegrations;
};
export type LinkedIntegrations = {
    figma?: UserLinkedIntegration;
};
type UserLinkedIntegration = {
    id: string;
    email?: string;
    handle?: string;
    avatarUrl?: string;
};
export type UserTransportModel = Pick<User, "id" | "email"> & {
    createdAt: string;
    profile: UserProfileTransportModel;
    linkedIntegrations?: LinkedIntegrations;
};
export type UserAvatarUpdateModel = {
    avatar?: string;
};
export declare class User {
    /** Unique user identifier */
    id: string;
    /** Unique user email */
    email: string;
    /** When was the user created */
    createdAt: Date | null;
    /** User profile */
    profile: UserProfile;
    /** Linked integrations */
    linkedIntegrations: LinkedIntegrations | null;
    constructor(model: UserRemoteModel);
    /** Constructs representation that can be used to write full object to remote */
    toRemote(): UserRemoteModel;
    /** Constructs representation that can be used to transport the instantiated object as JSON, for example for SSR <> Client use-cases. Reconstruct to class instance using `fromTransport` */
    toTransport(): UserTransportModel;
    /** Reconstructs class from the transport model */
    static fromTransport(model: UserTransportModel): User;
}
export {};
