import { Source, SourceRemoteModel, SourceTransportModel } from "../support/SDKSource";
export type DesignSystemSwitcher = {
    isEnabled: boolean;
    designSystemIds: Array<string>;
};
export type DesignSystemRemoteModel = {
    id: string;
    meta: {
        name: string;
        description: string;
    };
    workspaceId: string;
    sources: Array<SourceRemoteModel>;
    isPublic: boolean;
    isMultibrand: boolean;
    docSlug: string;
    docUserSlug?: string;
    docExporterId: string;
    designSystemSwitcher: DesignSystemSwitcher;
};
export type DesignSystemTransportModel = Pick<DesignSystem, "id" | "name" | "description" | "isPublic" | "isMultiBrand" | "documentationSlug" | "documentationUserSlug" | "documentationExporterId" | "designSystemSwitcher" | "workspaceId"> & {
    sources: Array<SourceTransportModel>;
};
export declare class DesignSystem {
    /** Unique identifier of design system */
    id: string;
    /** Unique identifier of workspace that contains the design system */
    workspaceId: string;
    /** Design system name */
    name: string;
    /** Design system description */
    description: string;
    /** If enabled, parts of the design system can be accessed by public (for example, documentation site) */
    isPublic: boolean;
    /** If set, signals that multibrand functionality is enabled for this design system */
    isMultiBrand: boolean;
    /** Unique identifier of exporter package used for the documentation */
    documentationExporterId: string;
    /** DocumentationLegacy URL slug */
    documentationSlug: string;
    /** DocumentationLegacy URL slug - user override */
    documentationUserSlug: string | null;
    /** Binding multiple design systems together */
    designSystemSwitcher: DesignSystemSwitcher;
    /** Data sources linked with this design system */
    sources: Array<Source>;
    constructor(model: DesignSystemRemoteModel);
    /** Constructs representation that can be used to write full object to remote */
    toRemote(): DesignSystemRemoteModel;
    /** Constructs representation that can be used to transport the instantiated object as JSON, for example for SSR <> Client use-cases. Reconstruct to class instance using `fromTransport` */
    toTransport(): DesignSystemTransportModel;
    /** Reconstructs class from the transport model */
    static fromTransport(model: DesignSystemTransportModel): DesignSystem;
}
