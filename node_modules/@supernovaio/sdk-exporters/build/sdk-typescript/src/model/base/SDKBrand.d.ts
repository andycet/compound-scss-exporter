export type BrandRemoteModel = {
    id: string;
    designSystemVersionId: string;
    persistentId: string;
    meta: {
        name: string;
        description?: string;
    };
};
export type BrandUpdateModel = {
    name: string;
    description?: string;
};
type BrandTransportModel = Pick<Brand, "idInVersion" | "id" | "designSystemVersionId" | "name" | "description">;
export declare class Brand {
    /** Unique identifier of the brand in this specific version */
    idInVersion: string;
    /** Unique identifier of the brand */
    id: string;
    /** Version in which the brand is located */
    designSystemVersionId: string;
    /** Brand name */
    name: string;
    /** Brand description */
    description: string;
    constructor(model: BrandRemoteModel);
    /** Constructs representation that can be used to write full object to remote */
    toRemote(): BrandRemoteModel;
    /** Constructs representation that can be used to transport the instantiated object as JSON, for example for SSR <> Client use-cases. Reconstruct to class instance using `fromTransport` */
    toTransport(): BrandTransportModel;
    /** Reconstructs class from the transport model */
    static fromTransport(model: BrandTransportModel): Brand;
}
export {};
