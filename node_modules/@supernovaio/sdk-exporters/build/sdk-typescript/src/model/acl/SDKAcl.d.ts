import { UserRole } from "../enums/SDKUserRole";
export type SingleResourceRemoteAcl = {
    role: UserRole;
    extends: UserRole[];
    grants: string[];
};
export type AclRemoteModel = {
    workspaces: {
        roles: SingleResourceRemoteAcl[];
    };
    dsm: {
        designSystems: {
            roles: SingleResourceRemoteAcl[];
        };
        designSystemVersions: {
            roles: SingleResourceRemoteAcl[];
        };
        designSystemSources: {
            roles: SingleResourceRemoteAcl[];
        };
        tokens: {
            roles: SingleResourceRemoteAcl[];
        };
    };
};
type SingleResourceAcl = {
    role: UserRole;
    extends: UserRole[];
    grants: string[];
};
export type AclPermissionResolution = {
    hasPermission: true;
    reason?: never;
    closestRoleWithPermission?: never;
} | {
    hasPermission: false;
    reason: string;
    closestRoleWithPermission?: UserRole;
};
export declare class Acl {
    workspaces: SingleResourceAcl[];
    designSystems: SingleResourceAcl[];
    designSystemVersions: SingleResourceAcl[];
    designSystemSources: SingleResourceAcl[];
    tokens: SingleResourceAcl[];
    constructor(model: AclRemoteModel);
    getExtendedGrants(acls: SingleResourceRemoteAcl[], acl: SingleResourceRemoteAcl): string[];
    findClosestRoleWithGrant(acls: SingleResourceRemoteAcl[], acl: SingleResourceRemoteAcl, permission: string): UserRole | null;
    hasPermission(resource: string, permission: string, role: UserRole): AclPermissionResolution;
}
export {};
