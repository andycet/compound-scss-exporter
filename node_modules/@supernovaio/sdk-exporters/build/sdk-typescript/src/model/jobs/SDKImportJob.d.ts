import { ImportJobOperation } from "../enums/SDKImportJobOperation";
import { ImportJobState } from "../enums/SDKImportJobState";
import { Source, SourceRemoteModel } from "../support/SDKSource";
type SourceRemoteModelWithSourceId = Omit<SourceRemoteModel, "id"> & {
    sourceId: string;
};
export type ImportJobRemoteModel = {
    id: string;
    designSystemId: string;
    designSystemVersionId: string;
    createdAt?: string;
    stateChangedAt?: string;
    state: ImportJobState;
    error?: string;
    operation: ImportJobOperation;
    sources: Array<SourceRemoteModelWithSourceId>;
};
export declare class ImportJob {
    /** Unique identifier of the job */
    id: string;
    /** Unique identifier of the design system this job lives in */
    designSystemId: string;
    /** Unique identifier of the design system version this job lives in */
    designSystemVersionId: string;
    /** Job creation date */
    createdAt: Date | null;
    /** Date of the last change of the job status */
    stateChangedAt: Date | null;
    /** Job state - Queued, InProgress, Failed or Success */
    state: ImportJobState;
    /** Reason for failure of this import job. Will only be present if `state === failed` */
    error: string | null;
    /** Job operation - Check or Import */
    operation: ImportJobOperation;
    /** All sources participating in this import job */
    sources: Array<Source>;
    constructor(model: ImportJobRemoteModel);
}
export {};
