import { TokenType } from "../enums/SDKTokenType";
import { Token } from "../tokens/SDKToken";
import { AnyToken, AnyTokenValue } from "../tokens/SDKTokenValue";
import { TokenThemeOverrideRemoteModel } from "./SDKTokenThemeOverride";
export type TokenThemeRemoteModel = {
    meta: {
        name: string;
        description: string;
    };
    id?: string;
    persistentId: string;
    designSystemVersionId: string;
    brandId: string;
    codeName: string;
    createdAt?: string;
    updatedAt?: string;
    overrides: Array<TokenThemeOverrideRemoteModel>;
};
export declare class TokenTheme {
    id: string;
    idInVersion: string;
    brandId: string;
    designSystemVersionId: string;
    name: string;
    description: string;
    codeName: string;
    createdAt: Date | null;
    updatedAt: Date | null;
    overriddenTokens: Array<Token>;
    constructor(model: TokenThemeRemoteModel, versionId: string);
    addOverride(override: Token): void;
    addOverrides(overrides: Array<Token>): void;
    toWriteObject(): TokenThemeRemoteModel;
    private tokensToOverrides;
    toWriteOverrideObject(token: Token): TokenThemeOverrideRemoteModel;
    valueToWriteObject(value: AnyTokenValue, type: TokenType, token: AnyToken): import("../tokens/remote/SDKRemoteTokenData").ShadowTokenRemoteData | import("../tokens/remote/SDKRemoteTokenData").GradientTokenRemoteData | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").BlurTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").BorderTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").ColorTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").AnyDimensionTokenRemoteValue;
    } | {
        aliasTo: string;
        value: string;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").TypographyTokenRemoteValue;
    };
}
