export declare enum TokenType {
    color = "Color",
    typography = "Typography",
    dimension = "Dimension",
    size = "Size",
    space = "Space",
    opacity = "Opacity",
    fontSize = "FontSize",
    lineHeight = "LineHeight",
    letterSpacing = "LetterSpacing",
    paragraphSpacing = "ParagraphSpacing",
    borderWidth = "BorderWidth",
    radius = "BorderRadius",
    duration = "Duration",
    zIndex = "ZIndex",
    shadow = "Shadow",
    border = "Border",
    gradient = "Gradient",
    string = "String",
    productCopy = "ProductCopy",
    fontFamily = "FontFamily",
    fontWeight = "FontWeight",
    textCase = "TextCase",
    textDecoration = "TextDecoration",
    visibility = "Visibility",
    blur = "Blur"
}
export declare const STRING_TOKEN_TYPES: readonly [TokenType.string, TokenType.productCopy, TokenType.fontFamily, TokenType.fontWeight];
export type StringTokenType = (typeof STRING_TOKEN_TYPES)[number];
export declare const OPTION_TOKEN_TYPES: readonly [TokenType.textCase, TokenType.textDecoration, TokenType.visibility];
export type OptionTokenType = (typeof OPTION_TOKEN_TYPES)[number];
export declare const DIMENSION_TOKEN_TYPES: readonly [TokenType.dimension, TokenType.size, TokenType.space, TokenType.opacity, TokenType.fontSize, TokenType.lineHeight, TokenType.letterSpacing, TokenType.paragraphSpacing, TokenType.borderWidth, TokenType.radius, TokenType.duration, TokenType.zIndex];
export type DimensionTokenType = (typeof DIMENSION_TOKEN_TYPES)[number];
export declare const RAW_DIMENSION_TOKEN_TYPES: readonly [TokenType.opacity, TokenType.zIndex];
export declare const MS_DIMENSION_TOKEN_TYPES: readonly [TokenType.duration];
export declare const ALL_TOKEN_TYPES: readonly [TokenType.dimension, TokenType.size, TokenType.space, TokenType.opacity, TokenType.fontSize, TokenType.lineHeight, TokenType.letterSpacing, TokenType.paragraphSpacing, TokenType.borderWidth, TokenType.radius, TokenType.duration, TokenType.zIndex, TokenType.string, TokenType.productCopy, TokenType.fontFamily, TokenType.fontWeight, TokenType.textCase, TokenType.textDecoration, TokenType.visibility, TokenType.color, TokenType.gradient, TokenType.border, TokenType.radius, TokenType.shadow, TokenType.typography, TokenType.blur];
export declare const PURE_TOKEN_TYPES: readonly [TokenType.dimension, TokenType.size, TokenType.space, TokenType.opacity, TokenType.fontSize, TokenType.lineHeight, TokenType.letterSpacing, TokenType.paragraphSpacing, TokenType.borderWidth, TokenType.radius, TokenType.duration, TokenType.zIndex, TokenType.string, TokenType.productCopy, TokenType.fontFamily, TokenType.fontWeight, TokenType.textCase, TokenType.textDecoration, TokenType.visibility];
export type PureTokenType = (typeof PURE_TOKEN_TYPES)[number];
export type NonPureTokenType = Exclude<TokenType, PureTokenType>;
export declare const tokenTypeIsPure: (tokenType: TokenType) => tokenType is TokenType.dimension | TokenType.size | TokenType.space | TokenType.opacity | TokenType.fontSize | TokenType.lineHeight | TokenType.letterSpacing | TokenType.paragraphSpacing | TokenType.borderWidth | TokenType.radius | TokenType.duration | TokenType.zIndex | TokenType.string | TokenType.productCopy | TokenType.fontFamily | TokenType.fontWeight | TokenType.textCase | TokenType.textDecoration | TokenType.visibility;
export declare const tokenTypeIsNonPure: (tokenType: TokenType) => tokenType is NonPureTokenType;
export declare const REPLACABLE_TOKEN_TYPES: readonly [TokenType.color, TokenType.dimension, TokenType.size, TokenType.space, TokenType.opacity, TokenType.fontSize, TokenType.lineHeight, TokenType.letterSpacing, TokenType.paragraphSpacing, TokenType.borderWidth, TokenType.radius, TokenType.duration, TokenType.zIndex, TokenType.string, TokenType.productCopy, TokenType.fontFamily, TokenType.fontWeight, TokenType.textCase, TokenType.textDecoration, TokenType.visibility];
export type ReplacableTokenType = (typeof REPLACABLE_TOKEN_TYPES)[number];
export declare const REFERENCABLE_TOKEN_TYPES: readonly [TokenType.color, TokenType.dimension, TokenType.size, TokenType.space, TokenType.opacity, TokenType.fontSize, TokenType.lineHeight, TokenType.letterSpacing, TokenType.paragraphSpacing, TokenType.borderWidth, TokenType.radius, TokenType.duration, TokenType.zIndex, TokenType.fontFamily, TokenType.fontWeight, TokenType.textCase, TokenType.textDecoration];
export type ReferencableTokenType = (typeof REFERENCABLE_TOKEN_TYPES)[number];
export declare const tokenTypeIsReferencable: (tokenType: TokenType) => tokenType is TokenType.color | TokenType.dimension | TokenType.size | TokenType.space | TokenType.opacity | TokenType.fontSize | TokenType.lineHeight | TokenType.letterSpacing | TokenType.paragraphSpacing | TokenType.borderWidth | TokenType.radius | TokenType.duration | TokenType.zIndex | TokenType.fontFamily | TokenType.fontWeight | TokenType.textCase | TokenType.textDecoration;
export declare const DT_TOKEN_TYPES: readonly [TokenType.color, TokenType.shadow, TokenType.gradient, TokenType.typography, TokenType.border, TokenType.dimension, TokenType.size, TokenType.space, TokenType.opacity, TokenType.fontSize, TokenType.lineHeight, TokenType.letterSpacing, TokenType.paragraphSpacing, TokenType.borderWidth, TokenType.radius, TokenType.duration, TokenType.zIndex, TokenType.fontFamily, TokenType.fontWeight, TokenType.textCase, TokenType.textDecoration, TokenType.visibility];
export type DTTokenType = (typeof DT_TOKEN_TYPES)[number];
export type DTOriginalTokenType = "color" | "borderRadius" | "boxShadow" | "gradient" | "typography" | "border" | "borderWidth" | "sizing" | "opacity" | "spacing" | "fontSizes" | "paragraphSpacing" | "letterSpacing" | "lineHeights" | "other" | "dimension" | "fontFamilies" | "fontWeights" | "textCase" | "textDecoration";
