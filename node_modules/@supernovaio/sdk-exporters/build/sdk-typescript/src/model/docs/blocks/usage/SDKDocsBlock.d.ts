import { DocsBlockItemEntityType } from "../../../enums/SDKDocsBlockItemEntityType";
import { DocsColorRef } from "../support/SDKDocsColorRef";
import { DocsLinkRef } from "../support/SDKDocsLinkRef";
export type DocsBlockStaticDataValue = string | number | boolean | object | Array<string | number | boolean | object>;
export type DocsBlockModel = {
    id: string;
    packageId: string;
    layoutId?: string;
    indentLevel: number;
    appearance?: {
        itemBackgroundColor?: DocsColorRef;
    };
    staticData?: Array<{
        [key: string]: DocsBlockStaticDataValue;
        link?: DocsLinkRef;
    }>;
    dynamicData?: Array<{
        entityId: string;
        entityType: DocsBlockItemEntityType;
    }>;
    dynamicDataOrder: Array<string>;
};
export declare class DocsBlock {
    /** Unique identifier of the block */
    id: string;
    /** Unique identifier of the block package */
    packageId: string;
    /** Unique identifier of the layout variant */
    layoutId: string | null;
    /** Indentation of the block in levels (0, 1, 2), not pixels */
    indentLevel: number;
    /** Block appearance - Properties that are natively available for all blocks, such as background color */
    appearance: {
        /** Background color of all items of the block. Can be further overriden on every item */
        itemBackgroundColor: DocsColorRef | null;
    };
    /** Static data represents data for items that are created without dynamic reference to entities in Supernova - an example of this would be a shortcut.
     * This is an array, because for blocks with items being able to form grids, we need more than a single definition (each item has its own settings then)
     * Property resolution:
     *   data > default (in block property definition) > not set
     */
    staticData: Array<{
        /** Dynamic key coming from property.id block definition */
        [key: string]: DocsBlockStaticDataValue;
        /** Link where the item points to, if any. Must be enabled in behaviors */
        link?: DocsLinkRef;
    }>;
    /** Dynamic data represents data for items that reference entities in Supernova - an example of this would be a token block.
     * This is an array, because multiple entities can be selected at once */
    dynamicData: Array<{
        entityId: string;
        entityType: DocsBlockItemEntityType;
    }>;
    /** If user re-ordered items that are pulled dynamically, order from this field should take precedent over default ordering */
    dynamicDataOrder: Array<string>;
    constructor(model: DocsBlockModel);
}
