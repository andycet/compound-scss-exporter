import { DocsBlockItemPropertyType } from "../../../enums/SDKDocsBlockItemPropertyType";
export type DocsBlockPropertyDefinitionModel = {
    id: string;
    name: string;
    type: DocsBlockItemPropertyType;
    description?: string;
    options?: object | Record<string, never>;
    variantOptions?: {
        [key: string]: object | Record<string, never>;
    };
};
/** Generic property definition for when we don't care about specific types in options, just want to use the property high-level data */
export type DocsBlockItemPropertyAnyDefinition = DocsBlockPropertyDefinition<any>;
export declare class DocsBlockPropertyDefinition<T extends object> {
    /** Property id, validated to be unique within a block, but not necessarily unique across all blocks */
    id: string;
    /** Human readable name that will show in the editor */
    name: string;
    /** Property type. There are many different types of properties, explained later */
    type: DocsBlockItemPropertyType;
    /** Human readable description that will show next to the property */
    description: string | null;
    /** Options specific to this property type */
    options: T | null;
    /**
     * Overrides of options for different variants.
     * Key/s must be set as id of the variant for override to go into effect.
     * Options are resolved as variantOptions[key] > options > default for any variant.
     * It is possible to override only a subset of options, in which case combination of default option settings and the override goes into effect */
    variantOptions: {
        [key: string]: T;
    } | null;
    constructor(model: DocsBlockPropertyDefinitionModel);
}
