import { DocsBlockItemVariantLayoutAlign } from "../../../enums/SDKDocsBlockItemVariantLayoutAlign";
import { DocsBlockItemVariantLayoutColumnResizing } from "../../../enums/SDKDocsBlockItemVariantLayoutColumnResizing";
import { DocsBlockItemVariantLayoutGap } from "../../../enums/SDKDocsBlockItemVariantLayoutGap";
import { DocsBlockItemVariantLayoutType } from "../../../enums/SDKDocsBlockItemVariantLayoutType";
export type DocsBlockLayoutModel = {
    type: DocsBlockItemVariantLayoutType;
    children: Array<DocsBlockLayoutModel | string>;
    gap?: DocsBlockItemVariantLayoutGap;
    columnAlign?: DocsBlockItemVariantLayoutAlign;
    columnResizing?: DocsBlockItemVariantLayoutColumnResizing;
};
export declare class DocsBlockLayout {
    /** Type of a single node of the layout, either column for stacking vertically, or row for stacking horizontally */
    type: DocsBlockItemVariantLayoutType;
    /** Children of the layout for building nesting layouts or for declaring what all properties should show in a single node, or combination of both */
    children: Array<DocsBlockLayout | string>;
    /** Gap between children in the column/row */
    gap?: DocsBlockItemVariantLayoutGap;
    /** Alignment of the column (rows ignore this property) */
    columnAlign?: DocsBlockItemVariantLayoutAlign;
    /** Resizing of the column (rows ignore this property) */
    columnResizing?: DocsBlockItemVariantLayoutColumnResizing;
    constructor(model: DocsBlockLayoutModel);
}
