import { ImportWarningType } from "../enums/SDKCloudWarningType";
import { SourceType } from "../enums/SDKSourceType";
export type SourceRemoteModel = {
    type: SourceType;
    id: string;
    fileName?: string;
    linkType: "Design" | "Frames";
    brandId?: string;
    plugin?: {
        fileId: string;
        lastImportedAt?: string;
    };
    cloud?: SourceRemoteModelCloud;
    tokenStudio?: SourceRemoteModelTokensStudio;
    scope: SourceScope;
};
export type SourceScope = {
    tokens: boolean;
    components: boolean;
    assets: boolean;
    documentationFrames: boolean;
};
export type SourceRemoteModelCloud = {
    fileId?: string;
    autoImportMode: "Never" | "Hourly";
    fileThumbnailUrl?: string;
    lastUpdatesCheckedAt?: string;
    lastImportedVersion?: {
        id: string;
        created_at: string;
        label?: string;
        description: string;
    };
    lastImportedAt?: string;
    lastImportResult?: {
        sourceId: string;
        brandId: string;
        tokensCreated: number;
        tokensUpdated: number;
        tokensDeleted: number;
        componentsCreated: number;
        componentsUpdated: number;
        componentsDeleted: number;
        componentAssetsCreated: number;
        componentAssetsUpdated: number;
        componentAssetsDeleted: number;
        isFailed: boolean;
        versionId: string;
        fileSize?: number;
        warnings?: Array<SourceImportResultWarning>;
        isFramesFailed: boolean;
        assetsInFile?: {
            frames: number;
            components: number;
        };
        invalidReferencesCount?: number;
    };
    ownerId: string;
    ownerUserName: string;
    state: string;
    stats: {
        tokens: number;
        components: number;
        assets: number;
        frames: number;
    };
};
export type SourceImportResultWarning = {
    warningType: ImportWarningType;
    componentId: string;
    componentName: string;
    styleId: string;
    styleName: string;
    unsupportedStyleValueType: string;
};
export type SourceRemoteModelTokensStudio = {
    connectionName: string;
    lastImportedAt?: string;
    settings?: {
        dryRun?: boolean;
        verbose?: boolean;
        preciseCopy?: boolean;
    };
    lastImportedResults?: Array<{
        mapping: {
            tokensTheme?: string;
            tokenSets?: string[];
            supernovaBrand?: string;
            supernovaTheme?: string;
        };
        tokensCreated: number;
        tokensUpdated: number;
        tokensDeleted: number;
        isFailed: boolean;
        error?: string;
        themeId?: string;
    }>;
};
export type SourceModelTokenStudio = Omit<SourceRemoteModelTokensStudio, "lastUpdatesCheckedAt" | "lastImportedAt"> & {
    lastUpdatesCheckedAt?: Date;
    lastImportedAt?: Date;
};
export type SourceModelCloud = Omit<SourceRemoteModelCloud, "lastUpdatesCheckedAt" | "lastImportedAt"> & {
    lastUpdatesCheckedAt?: Date;
    lastImportedAt?: Date;
};
export type SourceTransportModel = Pick<Source, "type" | "id" | "fileName" | "linkType" | "brandId" | "scope"> & {
    cloud?: SourceRemoteModelCloud | null;
};
export declare class Source {
    type: SourceType;
    id: string;
    fileName: string | null;
    linkType: "Design" | "Frames";
    brandId: string | null;
    cloud: SourceModelCloud | null;
    tokenStudio?: SourceModelTokenStudio | null;
    scope: SourceScope;
    get hasError(): boolean;
    get hasWarning(): boolean;
    get isCloudAvailable(): boolean;
    get isTokensStudioAvailable(): boolean;
    get tokensStudioHasError(): boolean;
    constructor(model: SourceRemoteModel);
    /** Constructs representation that can be used to write full object to remote */
    toRemote(): SourceRemoteModel;
    /** Constructs representation that can be used to transport the instantiated object as JSON, for example for SSR <> Client use-cases. Reconstruct to class instance using `fromTransport` */
    toTransport(): SourceTransportModel;
    /** Reconstructs class from the transport model */
    static fromTransport(model: SourceTransportModel): SourceRemoteModel;
}
