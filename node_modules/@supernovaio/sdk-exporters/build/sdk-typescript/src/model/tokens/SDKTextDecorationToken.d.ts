import { DTTokenReferenceResolver } from "../../tools/design-tokens/utilities/SDKDTTokenReferenceResolver";
import { ElementProperty } from "../elements/SDKElementProperty";
import { ElementPropertyValue } from "../elements/values/SDKElementPropertyValue";
import { TextDecoration } from "../enums/SDKTextDecoration";
import { OptionTokenType, TokenType } from "../enums/SDKTokenType";
import { TextCaseTokenRemoteModel, TokenRemoteModel } from "./remote/SDKRemoteTokenModel";
import { TextDecorationTokenRemoteValue } from "./remote/SDKRemoteTokenValue";
import { Token } from "./SDKToken";
import { AnyOptionTokenValue, TextDecorationTokenValue } from "./SDKTokenValue";
export declare class TextDecorationToken extends Token {
    value: TextDecorationTokenValue;
    tokenType: TokenType.textDecoration;
    constructor(versionId: string, baseToken: TokenRemoteModel, value: TextDecorationTokenValue, alias: TextDecorationToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>);
    static create(versionId: string, brandId: string, name: string, description: string, value: string, alias: TextDecorationToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>): TextDecorationToken;
    static textDecorationFromDefinition(textDecoration: string): {
        value: TextDecoration;
        referencedTokenId: any;
    };
    static optionValueFromDefinitionOrReference(definition: any, referenceResolver: DTTokenReferenceResolver, tokenType: OptionTokenType): AnyOptionTokenValue;
    static optionValueFromDefinition(definition: string, type: OptionTokenType): AnyOptionTokenValue;
    toWriteObject(): TextCaseTokenRemoteModel;
    static valueToWriteObject(value: TextDecorationTokenValue): {
        aliasTo: string | undefined;
        value: TextDecorationTokenRemoteValue;
    };
}
