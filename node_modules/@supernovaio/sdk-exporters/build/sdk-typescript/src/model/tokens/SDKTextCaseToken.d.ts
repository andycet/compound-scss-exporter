import { ElementProperty } from "../elements/SDKElementProperty";
import { ElementPropertyValue } from "../elements/values/SDKElementPropertyValue";
import { TextCase } from "../enums/SDKTextCase";
import { TokenType } from "../enums/SDKTokenType";
import { TextCaseTokenRemoteModel, TokenRemoteModel } from "./remote/SDKRemoteTokenModel";
import { TextCaseTokenRemoteValue } from "./remote/SDKRemoteTokenValue";
import { Token } from "./SDKToken";
import { TextCaseTokenValue } from "./SDKTokenValue";
export declare class TextCaseToken extends Token {
    value: TextCaseTokenValue;
    tokenType: TokenType.textCase;
    constructor(versionId: string, baseToken: TokenRemoteModel, value: TextCaseTokenValue, alias: TextCaseToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>);
    static create(versionId: string, brandId: string, name: string, description: string, value: string, alias: TextCaseToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>): TextCaseToken;
    static textCaseFromDefinition(textCase: string): {
        value: TextCase;
        referencedTokenId: any;
    };
    toWriteObject(): TextCaseTokenRemoteModel;
    static valueToWriteObject(value: TextCaseTokenValue): {
        aliasTo: string | undefined;
        value: TextCaseTokenRemoteValue;
    };
}
