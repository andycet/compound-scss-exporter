import { ElementProperty } from "../elements/SDKElementProperty";
import { ElementPropertyValue } from "../elements/values/SDKElementPropertyValue";
import { TokenType } from "../enums/SDKTokenType";
import { TextCaseTokenRemoteModel, TokenRemoteModel } from "./remote/SDKRemoteTokenModel";
import { VisibilityTokenRemoteValue } from "./remote/SDKRemoteTokenValue";
import { Token } from "./SDKToken";
import { VisibilityTokenValue } from "./SDKTokenValue";
export declare class VisibilityToken extends Token {
    value: VisibilityTokenValue;
    tokenType: TokenType.visibility;
    constructor(versionId: string, baseToken: TokenRemoteModel, value: VisibilityTokenValue, alias: VisibilityToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>);
    static create(versionId: string, brandId: string, name: string, description: string, value: string, alias: VisibilityToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>): VisibilityToken;
    toWriteObject(): TextCaseTokenRemoteModel;
    static valueToWriteObject(value: VisibilityTokenValue): {
        aliasTo: string | undefined;
        value: VisibilityTokenRemoteValue;
    };
}
