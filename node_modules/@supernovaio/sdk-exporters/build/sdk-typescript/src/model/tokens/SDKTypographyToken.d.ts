import { DTTokenReferenceResolver } from "../../tools/design-tokens/utilities/SDKDTTokenReferenceResolver";
import { ElementProperty } from "../elements/SDKElementProperty";
import { ElementPropertyValue } from "../elements/values/SDKElementPropertyValue";
import { TokenType } from "../enums/SDKTokenType";
import { TokenRemoteModel, TypographyTokenRemoteModel } from "./remote/SDKRemoteTokenModel";
import { TypographyTokenRemoteValue } from "./remote/SDKRemoteTokenValue";
import { Token } from "./SDKToken";
import { TypographyTokenValue } from "./SDKTokenValue";
export declare class TypographyToken extends Token {
    value: TypographyTokenValue;
    tokenType: TokenType.typography;
    constructor(versionId: string, baseToken: TokenRemoteModel, value: TypographyTokenValue, alias: TypographyToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>);
    static create(versionId: string, brandId: string, name: string, description: string, value: object, alias: TypographyToken | null, referenceResolver: DTTokenReferenceResolver, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>): TypographyToken;
    static typographyValueFromDefinition(definition: any, referenceResolver: DTTokenReferenceResolver): TypographyTokenValue;
    toWriteObject(): TypographyTokenRemoteModel;
    static valueToWriteObject(value: TypographyTokenValue): {
        aliasTo: string | undefined;
        value: TypographyTokenRemoteValue;
    };
}
