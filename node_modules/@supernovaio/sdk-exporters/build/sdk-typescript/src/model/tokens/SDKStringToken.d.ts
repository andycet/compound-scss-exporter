import { ElementProperty } from "../elements/SDKElementProperty";
import { ElementPropertyValue } from "../elements/values/SDKElementPropertyValue";
import { StringTokenType, TokenType } from "../enums/SDKTokenType";
import { StringTokenRemoteModel, TokenRemoteModel } from "./remote/SDKRemoteTokenModel";
import { StringTokenRemoteValue } from "./remote/SDKRemoteTokenValue";
import { Token } from "./SDKToken";
import { AnyStringTokenValue, FontFamilyTokenValue, FontWeightTokenValue, ProductCopyTokenValue, StringTokenValue } from "./SDKTokenValue";
import { DTTokenReferenceResolver } from "../../tools/design-tokens/utilities/SDKDTTokenReferenceResolver";
import { TokenClassTypeMapToken } from "../../utils/TokenUtils";
export declare class StringCategoryToken<T extends AnyStringTokenValue> extends Token {
    value: T;
    constructor(versionId: string, baseToken: TokenRemoteModel, value: T, alias: StringCategoryToken<T> | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>);
    static create<TValue extends AnyStringTokenValue, TToken extends StringCategoryToken<TValue>>(this: new (...args: any[]) => TToken, type: StringTokenType, versionId: string, brandId: string, name: string, description: string, value: string | number, alias: TToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>): TToken;
    static stringValueFromDefinitionOrReference(definition: any, referenceResolver: DTTokenReferenceResolver, tokenType: StringTokenType): AnyStringTokenValue | undefined;
    static stringValueFromDefinition(definition: string, tokenType: StringTokenType): AnyStringTokenValue;
    toWriteObject(): StringTokenRemoteModel;
    static valueToWriteObject(value: AnyStringTokenValue): {
        aliasTo: string | undefined;
        value: StringTokenRemoteValue;
    };
}
export declare class StringToken extends StringCategoryToken<StringTokenValue> {
    tokenType: TokenType.string;
}
export declare class ProductCopyToken extends StringCategoryToken<ProductCopyTokenValue> {
    tokenType: TokenType.productCopy;
}
export declare class FontFamilyToken extends StringCategoryToken<FontFamilyTokenValue> {
    tokenType: TokenType.fontFamily;
}
export declare class FontWeightToken extends StringCategoryToken<FontWeightTokenValue> {
    tokenType: TokenType.fontWeight;
}
export type AnyStringToken = StringToken | ProductCopyToken | FontFamilyToken | FontWeightToken;
export declare const resolveString: <TK extends TokenType.string | TokenType.productCopy | TokenType.fontFamily | TokenType.fontWeight>(type: TK) => {
    Color: typeof import("./SDKColorToken").ColorToken;
    Typography: typeof import("./SDKTypographyToken").TypographyToken;
    Blur: typeof import("./SDKBlurToken").BlurToken;
    Border: typeof import("./SDKBorderToken").BorderToken;
    Shadow: typeof import("./SDKShadowToken").ShadowToken;
    Gradient: typeof import("./SDKGradientToken").GradientToken;
    String: typeof StringToken;
    ProductCopy: typeof ProductCopyToken;
    FontFamily: typeof FontFamilyToken;
    FontWeight: typeof FontWeightToken;
    TextCase: typeof import("./SDKTextCaseToken").TextCaseToken;
    TextDecoration: typeof import("./SDKTextDecorationToken").TextDecorationToken;
    Visibility: typeof import("./SDKVisibilityToken").VisibilityToken;
    BorderWidth: typeof import("./SDKDimensionToken").BorderWidthToken;
    Dimension: typeof import("./SDKDimensionToken").DimensionToken;
    Size: typeof import("./SDKDimensionToken").SizeToken;
    Space: typeof import("./SDKDimensionToken").SpaceToken;
    Opacity: typeof import("./SDKDimensionToken").OpacityToken;
    FontSize: typeof import("./SDKDimensionToken").FontSizeToken;
    LineHeight: typeof import("./SDKDimensionToken").LineHeightToken;
    LetterSpacing: typeof import("./SDKDimensionToken").LetterSpacingToken;
    ParagraphSpacing: typeof import("./SDKDimensionToken").ParagraphSpacingToken;
    BorderRadius: typeof import("./SDKDimensionToken").RadiusToken;
    Duration: typeof import("./SDKDimensionToken").DurationToken;
    ZIndex: typeof import("./SDKDimensionToken").ZIndexToken;
}[TK];
