{"version":3,"file":"helpers.js","mappings":"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","sources":["webpack://@supernovaio/export-helpers/./src/aux/Iterators.ts","webpack://@supernovaio/export-helpers/./src/enums/ColorFormat.ts","webpack://@supernovaio/export-helpers/./src/enums/StringCase.ts","webpack://@supernovaio/export-helpers/./src/files/FileHelper.ts","webpack://@supernovaio/export-helpers/./src/libs/tokens.ts","webpack://@supernovaio/export-helpers/./src/network/NetworkHelper.ts","webpack://@supernovaio/export-helpers/./src/transforms/CSSHelper.ts","webpack://@supernovaio/export-helpers/./src/transforms/ColorHelper.ts","webpack://@supernovaio/export-helpers/./src/transforms/NamingHelper.ts","webpack://@supernovaio/export-helpers/external commonjs \"@supernovaio/sdk-exporters\"","webpack://@supernovaio/export-helpers/external commonjs \"change-case\"","webpack://@supernovaio/export-helpers/webpack/bootstrap","webpack://@supernovaio/export-helpers/./src/exports.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Iterators = void 0;\nconst sdk_exporters_1 = require(\"@supernovaio/sdk-exporters\");\n/** Contains useful static data that can be iterated over */\nclass Iterators {\n    /** All Supernova available token types */\n    static allTokenTypes() {\n        return [\n            sdk_exporters_1.TokenType.color,\n            sdk_exporters_1.TokenType.typography,\n            sdk_exporters_1.TokenType.dimension,\n            sdk_exporters_1.TokenType.size,\n            sdk_exporters_1.TokenType.space,\n            sdk_exporters_1.TokenType.opacity,\n            sdk_exporters_1.TokenType.fontSize,\n            sdk_exporters_1.TokenType.lineHeight,\n            sdk_exporters_1.TokenType.letterSpacing,\n            sdk_exporters_1.TokenType.paragraphSpacing,\n            sdk_exporters_1.TokenType.borderWidth,\n            sdk_exporters_1.TokenType.radius,\n            sdk_exporters_1.TokenType.duration,\n            sdk_exporters_1.TokenType.zIndex,\n            sdk_exporters_1.TokenType.shadow,\n            sdk_exporters_1.TokenType.border,\n            sdk_exporters_1.TokenType.gradient,\n            sdk_exporters_1.TokenType.string,\n            sdk_exporters_1.TokenType.productCopy,\n            sdk_exporters_1.TokenType.fontFamily,\n            sdk_exporters_1.TokenType.fontWeight,\n            sdk_exporters_1.TokenType.textCase,\n            sdk_exporters_1.TokenType.textDecoration,\n            sdk_exporters_1.TokenType.visibility,\n            sdk_exporters_1.TokenType.blur\n        ];\n    }\n    /** All Supernova available dimension token types */\n    static allDimensionTokenTypes() {\n        return [\n            sdk_exporters_1.TokenType.dimension,\n            sdk_exporters_1.TokenType.size,\n            sdk_exporters_1.TokenType.space,\n            sdk_exporters_1.TokenType.opacity,\n            sdk_exporters_1.TokenType.fontSize,\n            sdk_exporters_1.TokenType.lineHeight,\n            sdk_exporters_1.TokenType.letterSpacing,\n            sdk_exporters_1.TokenType.paragraphSpacing,\n            sdk_exporters_1.TokenType.borderWidth,\n            sdk_exporters_1.TokenType.radius,\n            sdk_exporters_1.TokenType.duration,\n            sdk_exporters_1.TokenType.zIndex\n        ];\n    }\n    /** All Supernova available string token types */\n    static allStringTokenTypes() {\n        return [sdk_exporters_1.TokenType.string, sdk_exporters_1.TokenType.productCopy, sdk_exporters_1.TokenType.fontFamily, sdk_exporters_1.TokenType.fontWeight];\n    }\n    /** All Supernova available option token types */\n    static allOptionTokenTypes() {\n        return [sdk_exporters_1.TokenType.textCase, sdk_exporters_1.TokenType.textDecoration, sdk_exporters_1.TokenType.visibility];\n    }\n}\nexports.Iterators = Iterators;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorFormat = void 0;\nvar ColorFormat;\n(function (ColorFormat) {\n    /** RGB - rgb(r,g,b). Ignores alpha */\n    ColorFormat[\"rgb\"] = \"rgb\";\n    /** RGBA - rgba(r,g,b,a). Always includes alpha */\n    ColorFormat[\"rgba\"] = \"rgba\";\n    /** Selects between rgb and rgba modes based on non-opaque alpha */\n    ColorFormat[\"smartRgba\"] = \"smartRgba\";\n    /** HEX - ffffff */\n    ColorFormat[\"hex6\"] = \"hex6\";\n    /** HEXA - ffffff00 */\n    ColorFormat[\"hex8\"] = \"hex8\";\n    /** #HEX - #ffffff */\n    ColorFormat[\"hashHex6\"] = \"hashHex6\";\n    /** #HEXA - #ffffff00 */\n    ColorFormat[\"hashHex8\"] = \"hashHex8\";\n    /** Selects between hex and hexa modes based on non-opaque alpha */\n    ColorFormat[\"smartHashHex\"] = \"smartHashHex\";\n    /** Selects between hex and hexa modes based on non-opaque alpha */\n    ColorFormat[\"smartHex\"] = \"smartHex\";\n    /** HSL - hsl(h,s,l). Ignores alpha */\n    ColorFormat[\"hsl\"] = \"hsl\";\n    /** HSLA - hsla(h,s,l,a). Always includes alpha */\n    ColorFormat[\"hsla\"] = \"hsla\";\n    /** Selects between hsl and hsla modes based on non-opaque alpha */\n    ColorFormat[\"smartHsla\"] = \"smartHsla\";\n    /** iOS UIColor created as UIColor(rgb: 0x000000).withAlphaComponent(0.5). Alpha component will be ommited if fully opaque */\n    ColorFormat[\"smartUIColor\"] = \"smartUIColor\";\n})(ColorFormat = exports.ColorFormat || (exports.ColorFormat = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StringCase = void 0;\nvar StringCase;\n(function (StringCase) {\n    /** Camel case (camelCase) */\n    StringCase[\"camelCase\"] = \"camelCase\";\n    /** Capital case (Capital Case) */\n    StringCase[\"capitalCase\"] = \"capitalCase\";\n    /** Constant case (CONSTANT_CASE) */\n    StringCase[\"constantCase\"] = \"constantCase\";\n    /** Dot case (dot.case) */\n    StringCase[\"dotCase\"] = \"dotCase\";\n    /** Header case (Header-Case) */\n    StringCase[\"headerCase\"] = \"headerCase\";\n    /** No case (no case) */\n    StringCase[\"noCase\"] = \"noCase\";\n    /** Param case (param-case) */\n    StringCase[\"paramCase\"] = \"paramCase\";\n    /** Pascal case (PascalCase) */\n    StringCase[\"pascalCase\"] = \"pascalCase\";\n    /** Path case (path/case) */\n    StringCase[\"pathCase\"] = \"pathCase\";\n    /** Sentence case (Sentence case) */\n    StringCase[\"sentenceCase\"] = \"sentenceCase\";\n    /** Snake case (snake_case) */\n    StringCase[\"snakeCase\"] = \"snakeCase\";\n})(StringCase = exports.StringCase || (exports.StringCase = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileHelper = void 0;\nconst sdk_exporters_1 = require(\"@supernovaio/sdk-exporters\");\n/** A utility class to help with creation of files for Supernova export routines */\nclass FileHelper {\n    /** Creates a new file that will copy its content from a remote URL to a specified destination (path + name) */\n    static createCopyRemoteFile({ relativePath, fileName, url }) {\n        return {\n            path: relativePath,\n            name: fileName,\n            type: sdk_exporters_1.OutputFileType.copyRemoteUrl,\n            url: url\n        };\n    }\n    /** Creates a new file that write its content to a specified destination (path + name) */\n    static createTextFile({ relativePath, fileName, content }) {\n        return {\n            path: relativePath,\n            name: fileName,\n            type: sdk_exporters_1.OutputFileType.text,\n            content: content\n        };\n    }\n    /** Creates a new file that write its content to a specified destination (path + name) */\n    static createBinaryFile({ relativePath, fileName, data }) {\n        return {\n            path: relativePath,\n            name: fileName,\n            type: sdk_exporters_1.OutputFileType.binary,\n            data: data\n        };\n    }\n}\nexports.FileHelper = FileHelper;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sureOptionalReference = void 0;\n/** Finds reference and makes sure it exists if reference was provided. If null was provided, null is on the output as well to make seeking outside few lines smaller */\nfunction sureOptionalReference(referenceId, allTokens, allowReferences = true) {\n    if (!referenceId || !allowReferences) {\n        return null;\n    }\n    const token = allTokens.get(referenceId);\n    if (!token) {\n        throw new Error(`Trying to retrieve unknown referenced token ${referenceId}`);\n    }\n    return token;\n}\nexports.sureOptionalReference = sureOptionalReference;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NetworkHelper = void 0;\n/** A utility class to help with network operations */\nclass NetworkHelper {\n    /**\n     * Perform fetch and parse response as plain text.\n     *\n     * @param url The URL to fetch the text data from.\n     * @param options Optional configurations for the fetch request.\n     * @returns A promise that resolves with the response processed as text.\n     */\n    static async fetchAsText(sdk, url, options) {\n        const response = await this.performFetch(sdk, url, options);\n        return response.text();\n    }\n    /**\n     * Perform fetch and parse response as JSON.\n     *\n     * @param url The URL to fetch the JSON data from.\n     * @param options Optional configurations for the fetch request.\n     * @returns A promise that resolves with the response processed as text.\n     */\n    static async fetchAsJSON(sdk, url, options) {\n        const response = await this.performFetch(sdk, url, options);\n        return response.json();\n    }\n    /**\n     * Perform fetch and parse response as plain text.\n     *\n     * @param url The URL to fetch the text data from.\n     * @param options Optional configurations for the fetch request.\n     * @returns A promise that resolves with the response processed as text.\n     */\n    static async fetchAsData(sdk, url, options) {\n        const response = await this.performFetch(sdk, url, options);\n        return response.arrayBuffer();\n    }\n    /** Perform generic fetch */\n    static async performFetch(sdk, url, options) {\n        try {\n            const response = await sdk.network.fetch(url, options);\n            if (!response.ok) {\n                throw new Error(`Request failed with status ${response.status}, error: ${await response.text()}`);\n            }\n            return response;\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n}\nexports.NetworkHelper = NetworkHelper;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CSSHelper = void 0;\nconst sdk_exporters_1 = require(\"@supernovaio/sdk-exporters\");\nconst tokens_1 = require(\"../libs/tokens\");\nconst ColorHelper_1 = require(\"./ColorHelper\");\n/** A utility class to help with transformation of tokens and Supernova token-like values to various formats */\nclass CSSHelper {\n    static tokenToCSS(token, allTokens, options) {\n        /** Use subroutines to convert specific token types to different css representations. Many tokens are of the same type */\n        switch (token.tokenType) {\n            case sdk_exporters_1.TokenType.color:\n                return this.colorTokenValueToCSS(token.value, allTokens, options);\n            case sdk_exporters_1.TokenType.border:\n                return this.borderTokenValueToCSS(token.value, allTokens, options);\n            case sdk_exporters_1.TokenType.gradient:\n                return this.gradientTokenValueToCSS(token.value, allTokens, options);\n            case sdk_exporters_1.TokenType.dimension:\n            case sdk_exporters_1.TokenType.size:\n            case sdk_exporters_1.TokenType.space:\n            case sdk_exporters_1.TokenType.opacity:\n            case sdk_exporters_1.TokenType.fontSize:\n            case sdk_exporters_1.TokenType.lineHeight:\n            case sdk_exporters_1.TokenType.letterSpacing:\n            case sdk_exporters_1.TokenType.paragraphSpacing:\n            case sdk_exporters_1.TokenType.borderWidth:\n            case sdk_exporters_1.TokenType.radius:\n            case sdk_exporters_1.TokenType.duration:\n            case sdk_exporters_1.TokenType.zIndex:\n                return this.dimensionTokenValueToCSS(token.value, allTokens, options);\n            case sdk_exporters_1.TokenType.shadow:\n                return this.shadowTokenValueToCSS(token.value, allTokens, options);\n            case sdk_exporters_1.TokenType.fontWeight:\n            case sdk_exporters_1.TokenType.fontFamily:\n            case sdk_exporters_1.TokenType.productCopy:\n            case sdk_exporters_1.TokenType.string:\n                return this.stringTokenValueToCSS(token.value, allTokens, options);\n            case sdk_exporters_1.TokenType.textCase:\n            case sdk_exporters_1.TokenType.textDecoration:\n            case sdk_exporters_1.TokenType.visibility:\n                return this.optionTokenValueToCSS(token.value, allTokens, options);\n            case sdk_exporters_1.TokenType.blur:\n                return this.blurTokenValueToCSS(token.value, allTokens, options);\n            case sdk_exporters_1.TokenType.typography:\n                return this.typographyTokenValueToCSS(token.value, allTokens, options);\n            default:\n                throw new sdk_exporters_1.UnreachableCaseError(token.tokenType, 'Unsupported token type for transformation to CSS:');\n        }\n    }\n    static colorTokenValueToCSS(color, allTokens, options) {\n        return ColorHelper_1.ColorHelper.formattedColorOrVariableName(color, allTokens, options);\n    }\n    static borderTokenValueToCSS(border, allTokens, options) {\n        const reference = (0, tokens_1.sureOptionalReference)(border.referencedTokenId, allTokens, options.allowReferences);\n        if (reference) {\n            return options.tokenToVariableRef(reference);\n        }\n        const data = {\n            width: this.dimensionTokenValueToCSS(border.width, allTokens, options),\n            style: this.borderStyleToCSS(border.style),\n            color: this.colorTokenValueToCSS(border.color, allTokens, options),\n            position: this.borderPositionToCSS(border.position) // Not used for now\n        };\n        return `${data.width} ${data.style} ${data.color}`;\n    }\n    static gradientTokenValueToCSS(gradients, allTokens, options) {\n        // Export each layer of the gradient separately, then join the CSS background\n        return gradients.map((gradient) => this.gradientLayerToCSS(gradient, allTokens, options)).join(', ');\n    }\n    /** Converts gradient token value to css definition */\n    static gradientLayerToCSS(value, allTokens, options) {\n        const reference = (0, tokens_1.sureOptionalReference)(value.referencedTokenId, allTokens, options.allowReferences);\n        if (reference) {\n            return options.tokenToVariableRef(reference);\n        }\n        let gradientType = '';\n        switch (value.type) {\n            case sdk_exporters_1.GradientType.linear:\n                gradientType = 'linear-gradient(0deg, ';\n                break;\n            case sdk_exporters_1.GradientType.radial:\n                gradientType = 'radial-gradient(circle, ';\n                break;\n            case sdk_exporters_1.GradientType.angular:\n                gradientType = 'conic-gradient(';\n                break;\n            default:\n                gradientType = 'linear-gradient(0deg, ';\n                break;\n        }\n        // Example: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\n        const stops = value.stops\n            .map((stop) => {\n            return `${this.colorTokenValueToCSS(stop.color, allTokens, options)} ${ColorHelper_1.ColorHelper.roundToDecimals(stop.position * 100, options.decimals)}%`;\n        })\n            .join(', ');\n        return `${gradientType}${stops})`;\n    }\n    static dimensionTokenValueToCSS(dimension, allTokens, options) {\n        const reference = (0, tokens_1.sureOptionalReference)(dimension.referencedTokenId, allTokens, options.allowReferences);\n        if (reference) {\n            return options.tokenToVariableRef(reference);\n        }\n        return `${ColorHelper_1.ColorHelper.roundToDecimals(dimension.measure, options.decimals)}${this.unitToCSS(dimension.unit)}`;\n    }\n    static shadowTokenValueToCSS(shadows, allTokens, options) {\n        return shadows.map((layer) => this.shadowLayerToCSS(layer, allTokens, options)).join(', ');\n    }\n    static shadowLayerToCSS(value, allTokens, options) {\n        const reference = (0, tokens_1.sureOptionalReference)(value.referencedTokenId, allTokens, options.allowReferences);\n        if (reference) {\n            return options.tokenToVariableRef(reference);\n        }\n        return `${value.type === sdk_exporters_1.ShadowType.inner ? 'inset ' : ''}${value.x}px ${value.y}px ${value.radius}px ${value.spread}px ${this.colorTokenValueToCSS(value.color, allTokens, options)}`;\n    }\n    static stringTokenValueToCSS(value, allTokens, options) {\n        const reference = (0, tokens_1.sureOptionalReference)(value.referencedTokenId, allTokens, options.allowReferences);\n        if (reference) {\n            return options.tokenToVariableRef(reference);\n        }\n        return `\"${value.text}\"`;\n    }\n    static optionTokenValueToCSS(option, allTokens, options) {\n        const reference = (0, tokens_1.sureOptionalReference)(option.referencedTokenId, allTokens, options.allowReferences);\n        if (reference) {\n            return options.tokenToVariableRef(reference);\n        }\n        return `\"${option.value}\"`;\n    }\n    static blurTokenValueToCSS(blur, allTokens, options) {\n        const reference = (0, tokens_1.sureOptionalReference)(blur.referencedTokenId, allTokens, options.allowReferences);\n        if (reference) {\n            return options.tokenToVariableRef(reference);\n        }\n        return `blur(${this.dimensionTokenValueToCSS(blur.radius, allTokens, options)})`;\n    }\n    static typographyTokenValueToCSS(typography, allTokens, options) {\n        // Reference full typography token if set\n        const reference = (0, tokens_1.sureOptionalReference)(typography.referencedTokenId, allTokens, options.allowReferences);\n        if (reference) {\n            return options.tokenToVariableRef(reference);\n        }\n        // Resolve partial references\n        const fontFamilyReference = (0, tokens_1.sureOptionalReference)(typography.fontFamily.referencedTokenId, allTokens, options.allowReferences);\n        const fontWeightReference = (0, tokens_1.sureOptionalReference)(typography.fontWeight.referencedTokenId, allTokens, options.allowReferences);\n        const decorationReference = (0, tokens_1.sureOptionalReference)(typography.textDecoration.referencedTokenId, allTokens, options.allowReferences);\n        const caseReference = (0, tokens_1.sureOptionalReference)(typography.textCase.referencedTokenId, allTokens, options.allowReferences);\n        const data = {\n            fontFamily: fontFamilyReference ? options.tokenToVariableRef(fontFamilyReference) : typography.fontFamily.text,\n            fontWeight: fontWeightReference ? options.tokenToVariableRef(fontWeightReference) : typography.fontWeight.text,\n            textDecoration: decorationReference\n                ? options.tokenToVariableRef(decorationReference)\n                : typography.textDecoration.value === sdk_exporters_1.TextDecoration.original\n                    ? this.textDecorationToCSS(typography.textDecoration.value)\n                    : undefined,\n            textCase: caseReference\n                ? options.tokenToVariableRef(caseReference)\n                : typography.textCase.value === sdk_exporters_1.TextCase.original\n                    ? this.textCaseToCSS(typography.textCase.value)\n                    : undefined,\n            caps: typography.textCase.value === sdk_exporters_1.TextCase.smallCaps,\n            fontSize: this.dimensionTokenValueToCSS(typography.fontSize, allTokens, options),\n            lineHeight: this.dimensionTokenValueToCSS(typography.lineHeight, allTokens, options)\n        };\n        // Formal CSS definition: font-style, font-variant, font-weight, font-stretch, font-size, line-height, and font-family.\n        // Example: small-caps bold 24px/1rem \"Wingdings\"\n        const fragmentCaps = data.caps ? 'small-caps ' : '';\n        const fragmentWeight = fontWeightReference ? data.fontWeight : `\\\"${data.fontWeight}\\\"`;\n        const fragmentSize = data.fontSize;\n        const fragmentLineHeight = data.lineHeight;\n        const fragmentFamily = fontFamilyReference ? data.fontFamily : `\\\"${data.fontFamily}\\\"`;\n        return `${fragmentCaps}${fragmentWeight} ${fragmentSize}/${fragmentLineHeight} ${fragmentFamily}`;\n    }\n    static borderStyleToCSS(borderStyle) {\n        switch (borderStyle) {\n            case sdk_exporters_1.BorderStyle.dashed:\n                return 'dashed';\n            case sdk_exporters_1.BorderStyle.dotted:\n                return 'dotted';\n            case sdk_exporters_1.BorderStyle.solid:\n                return 'solid';\n            case sdk_exporters_1.BorderStyle.groove:\n                return 'groove';\n            default:\n                return 'solid';\n        }\n    }\n    static borderPositionToCSS(borderPosition) {\n        switch (borderPosition) {\n            case sdk_exporters_1.BorderPosition.center:\n                return 'center';\n            case sdk_exporters_1.BorderPosition.inside:\n                return 'inside';\n            case sdk_exporters_1.BorderPosition.outside:\n                return 'outside';\n            default:\n                return 'outside';\n        }\n    }\n    static unitToCSS(unit) {\n        switch (unit) {\n            case sdk_exporters_1.Unit.percent:\n                return '%';\n            case sdk_exporters_1.Unit.pixels:\n                return 'px';\n            case sdk_exporters_1.Unit.rem:\n                return 'rem';\n            case sdk_exporters_1.Unit.raw:\n                return '';\n            case sdk_exporters_1.Unit.ms:\n                return 'ms';\n            default:\n                return 'px';\n        }\n    }\n    static textCaseToCSS(textCase) {\n        switch (textCase) {\n            case sdk_exporters_1.TextCase.original:\n                return 'none';\n            case sdk_exporters_1.TextCase.upper:\n                return 'uppercase';\n            case sdk_exporters_1.TextCase.lower:\n                return 'lowercase';\n            case sdk_exporters_1.TextCase.camel:\n            case sdk_exporters_1.TextCase.smallCaps:\n                return 'capitalize';\n        }\n    }\n    static textDecorationToCSS(textDecoration) {\n        switch (textDecoration) {\n            case sdk_exporters_1.TextDecoration.original:\n                return 'none';\n            case sdk_exporters_1.TextDecoration.underline:\n                return 'underline';\n            case sdk_exporters_1.TextDecoration.strikethrough:\n                return 'line-through';\n        }\n    }\n}\nexports.CSSHelper = CSSHelper;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorHelper = void 0;\nconst ColorFormat_1 = require(\"../enums/ColorFormat\");\nconst tokens_1 = require(\"../libs/tokens\");\n/** A utility class to help with transformation of colors to various formats */\nclass ColorHelper {\n    /**\n     * Behaves like a normal color formatter. However, if the color is reference, it returns the variable name instead of the formatted color.\n     * Precise behavior is as follows:\n     * - If the color is full reference, returns the variable name\n     * - If the color is partial reference, returns the formatted color with references where possible and raw values where not\n     * - Only supported partial reference formats are rgb, rgba, smartRgb\n     * - Variable names are generated by the provided functions\n     */\n    static formattedColorOrVariableName(color, allTokens, options) {\n        let fullReferenceName = undefined;\n        let colorReferenceName = undefined;\n        let opacityReferenceName = undefined;\n        // Check references first\n        const fullToken = (0, tokens_1.sureOptionalReference)(color.referencedTokenId, allTokens, options.allowReferences);\n        if (fullToken) {\n            fullReferenceName = options.tokenToVariableRef(fullToken);\n        }\n        else {\n            const colorToken = (0, tokens_1.sureOptionalReference)(color.color.referencedTokenId, allTokens, options.allowReferences);\n            if (colorToken) {\n                colorReferenceName = options.tokenToVariableRef(colorToken);\n            }\n            const opacityToken = (0, tokens_1.sureOptionalReference)(color.opacity.referencedTokenId, allTokens, options.allowReferences);\n            if (opacityToken) {\n                opacityReferenceName = options.tokenToVariableRef(opacityToken);\n            }\n        }\n        // If the full value is reference, return the variable name\n        if (fullReferenceName) {\n            return fullReferenceName;\n        }\n        // If there are no references, format the color raw\n        if (!fullReferenceName && !colorReferenceName && !opacityReferenceName) {\n            return this.formattedColor(color, options.colorFormat, options.decimals);\n        }\n        // If there are partial references, we'll use the references where possible and return the raw format for the rest\n        switch (options.colorFormat) {\n            case ColorFormat_1.ColorFormat.rgb:\n            case ColorFormat_1.ColorFormat.rgba:\n            case ColorFormat_1.ColorFormat.smartRgba:\n                return this.colorToRgb(options.colorFormat, this.normalizedIntColor(color), color.opacity.measure, options.decimals, colorReferenceName, opacityReferenceName);\n            default:\n                return this.formattedColor(color, options.colorFormat, options.decimals);\n        }\n    }\n    /**\n     * Formats Supernova color token value to a string based on the selected format. For fractional formats, the number of decimals can be specified.\n     */\n    static formattedColor(color, format, decimals = 3) {\n        switch (format) {\n            case ColorFormat_1.ColorFormat.hex6:\n            case ColorFormat_1.ColorFormat.hex8:\n            case ColorFormat_1.ColorFormat.hashHex6:\n            case ColorFormat_1.ColorFormat.hashHex8:\n            case ColorFormat_1.ColorFormat.smartHex:\n            case ColorFormat_1.ColorFormat.smartHashHex:\n                return this.colorToHex(format, this.normalizedIntColor(color), color.opacity.measure);\n            case ColorFormat_1.ColorFormat.rgb:\n            case ColorFormat_1.ColorFormat.rgba:\n            case ColorFormat_1.ColorFormat.smartRgba:\n                return this.colorToRgb(format, this.normalizedIntColor(color), color.opacity.measure, decimals, null, null);\n            case ColorFormat_1.ColorFormat.hsl:\n            case ColorFormat_1.ColorFormat.hsla:\n            case ColorFormat_1.ColorFormat.smartHsla:\n                return this.colorToHsl(format, this.normalizedFractionalColor(color), color.opacity.measure, decimals);\n            case ColorFormat_1.ColorFormat.smartUIColor:\n                return this.colorToUIColor(this.normalizedIntColor(color), color.opacity.measure, decimals);\n        }\n    }\n    // Convert color to rgb\n    static colorToRgb(format, color, alpha, decimals, colorRefReplace, opacityRefReplace) {\n        let resultingRgb;\n        if (format === ColorFormat_1.ColorFormat.rgba || (format === ColorFormat_1.ColorFormat.smartRgba && alpha < 1)) {\n            resultingRgb = `rgba(${colorRefReplace ? colorRefReplace : `${color.r}, ${color.g}, ${color.b}`}, ${opacityRefReplace ? opacityRefReplace : this.roundToDecimals(alpha, decimals)})`;\n        }\n        else {\n            resultingRgb = `rgb(${colorRefReplace ? colorRefReplace : `${color.r}, ${color.g}, ${color.b}`})`;\n        }\n        return resultingRgb;\n    }\n    // Convert color to hex\n    static colorToHex(format, color, alpha) {\n        // Always need hex6\n        let resultingHex = `${this.pHex(color.r)}${this.pHex(color.g)}${this.pHex(color.b)}`;\n        if (format === ColorFormat_1.ColorFormat.hex8 ||\n            format === ColorFormat_1.ColorFormat.hashHex8 ||\n            (format === ColorFormat_1.ColorFormat.smartHex && alpha < 1) ||\n            (format === ColorFormat_1.ColorFormat.smartHashHex && alpha < 1)) {\n            // Add alpha for 8-format\n            resultingHex += `${this.pHex(Math.round(alpha * 255))}`;\n        }\n        if (format === ColorFormat_1.ColorFormat.hashHex6 || format === ColorFormat_1.ColorFormat.hashHex8 || format === ColorFormat_1.ColorFormat.smartHashHex) {\n            // Add hash for hash-format\n            resultingHex = `#${resultingHex}`;\n        }\n        return resultingHex;\n    }\n    // Convert color to HSL\n    static colorToHsl(format, color, alpha, decimals) {\n        // Calculate HSL values\n        const max = Math.max(color.r, color.g, color.b), min = Math.min(color.r, color.g, color.b);\n        let h, s, l = (max + min) / 2;\n        if (max === min) {\n            h = s = 0; // achromatic\n        }\n        else {\n            const delta = max - min;\n            s = l > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n            if (max === color.r) {\n                h = (color.g - color.b) / delta + (color.g < color.b ? 6 : 0);\n            }\n            else if (max === color.g) {\n                h = (color.b - color.r) / delta + 2;\n            }\n            else if (max === color.b) {\n                h = (color.r - color.g) / delta + 4;\n            }\n            h /= 6;\n        }\n        let resultingHsl;\n        if (format === ColorFormat_1.ColorFormat.hsla || (format === ColorFormat_1.ColorFormat.smartHsla && alpha < 1)) {\n            resultingHsl = `hsla(${Math.round(h * 360)}%, ${Math.round(s * 100)}%, ${Math.round(l * 100)}%, ${this.roundToDecimals(alpha, decimals)})`;\n        }\n        else {\n            resultingHsl = `hsl(${Math.round(h * 360)}%, ${Math.round(s * 100)}%, ${Math.round(l * 100)}%)`;\n        }\n        return resultingHsl;\n    }\n    // Convert color to UIColor using base constructor\n    static colorToUIColor(color, alpha, decimals = 3) {\n        let resultingUIColor = `UIColor(rgb: 0x${this.pHex(color.r)}${this.pHex(color.g)}${this.pHex(color.b)})`;\n        if (alpha < 1) {\n            resultingUIColor += `.withAlphaComponent(${alpha})`;\n        }\n        return resultingUIColor;\n    }\n    // Convert color to normalized 0-255 format\n    static normalizedIntColor(color) {\n        return {\n            r: Math.round(color.color.r),\n            g: Math.round(color.color.g),\n            b: Math.round(color.color.b)\n        };\n    }\n    // Convert color to normalized 0-1 format\n    static normalizedFractionalColor(color, decimals = 3) {\n        return {\n            r: this.roundToDecimals(color.color.r / 255, decimals),\n            g: ColorHelper.roundToDecimals(color.color.g / 255, decimals),\n            b: ColorHelper.roundToDecimals(color.color.b / 255, decimals)\n        };\n    }\n    // Round half away from zero to a specific number of decimals\n    static roundToDecimals(value, decimals) {\n        const multiplier = Math.pow(10, decimals);\n        const rounded = Math.round(value * multiplier) / multiplier;\n        // Convert to string and parse back to number to remove unnecessary trailing zeroes\n        return parseFloat(rounded.toFixed(decimals));\n    }\n    // Return hex value with leading zero if hex is single digit\n    static pHex(value) {\n        return value.toString(16).padStart(2, '0');\n    }\n}\nexports.ColorHelper = ColorHelper;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamingHelper = void 0;\nconst change_case_1 = require(\"change-case\");\nconst StringCase_1 = require(\"../enums/StringCase\");\n/** A utility class to help with transformation of different strings to code-safe names */\nclass NamingHelper {\n    static codeSafeVariableNameForToken(token, format, parent, prefix) {\n        // Create array with all path segments and token name at the end\n        let fragments = [];\n        if (parent) {\n            fragments = [...parent.path];\n            if (!parent.isRoot) {\n                fragments.push(parent.name);\n            }\n        }\n        fragments.push(token.name);\n        if (prefix && prefix.length > 0) {\n            fragments.unshift(prefix);\n        }\n        return NamingHelper.codeSafeVariableName(fragments, format);\n    }\n    /**\n     * Transforms name into specific case from provided path fragments. Will also smartly split fragments into subfragments -\n     * if they contain spaces, case changes from one letter to another and so on.\n     *\n     * Also fixes additional problems, like the fact that variable name can't start with numbers - variable will be prefixed with \"_\" in that case\n     */\n    static codeSafeVariableName(fragments, format) {\n        let sentence = typeof fragments === 'string' ? fragments : fragments.join(' ');\n        // Only allow letters, digits, underscore and hyphen\n        sentence = sentence.replaceAll(/[^a-zA-Z0-9_-]/g, '_');\n        switch (format) {\n            case StringCase_1.StringCase.camelCase:\n                sentence = (0, change_case_1.camelCase)(sentence);\n                break;\n            case StringCase_1.StringCase.capitalCase:\n                sentence = (0, change_case_1.capitalCase)(sentence);\n                break;\n            case StringCase_1.StringCase.constantCase:\n                sentence = (0, change_case_1.constantCase)(sentence);\n                break;\n            case StringCase_1.StringCase.dotCase:\n                sentence = (0, change_case_1.dotCase)(sentence);\n                break;\n            case StringCase_1.StringCase.headerCase:\n                sentence = (0, change_case_1.headerCase)(sentence);\n                break;\n            case StringCase_1.StringCase.noCase:\n                sentence = (0, change_case_1.noCase)(sentence);\n                break;\n            case StringCase_1.StringCase.paramCase:\n                sentence = (0, change_case_1.paramCase)(sentence);\n                break;\n            case StringCase_1.StringCase.pascalCase:\n                sentence = (0, change_case_1.pascalCase)(sentence);\n                break;\n            case StringCase_1.StringCase.pathCase:\n                sentence = (0, change_case_1.pathCase)(sentence);\n                break;\n            case StringCase_1.StringCase.sentenceCase:\n                sentence = (0, change_case_1.sentenceCase)(sentence);\n                break;\n            case StringCase_1.StringCase.snakeCase:\n                sentence = (0, change_case_1.snakeCase)(sentence);\n                break;\n            default:\n                break;\n        }\n        // Remove all underscores if format is not snake_case, since the library has unintended behavior with numberic values in this case\n        if (format !== StringCase_1.StringCase.snakeCase && format !== StringCase_1.StringCase.constantCase) {\n            sentence = sentence.replaceAll('_', '');\n        }\n        // If variable starts with anything but letter, add \"_\" in front of it\n        if (sentence.match(/^[^a-zA-Z]/)) {\n            sentence = '_' + sentence;\n        }\n        return sentence;\n    }\n    /** Convert any string to CSS variable reference */\n    static nameAsCSSVarReference(name) {\n        return `var(--${name})`;\n    }\n    /** Conver any string to CSS variable declaration */\n    static nameAsCSSVarDeclaration(name) {\n        return `--${name}`;\n    }\n}\nexports.NamingHelper = NamingHelper;\n","module.exports = require(\"@supernovaio/sdk-exporters\");","module.exports = require(\"change-case\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorFormat = exports.StringCase = exports.Iterators = exports.CSSHelper = exports.FileHelper = exports.ColorHelper = exports.NamingHelper = exports.NetworkHelper = void 0;\n/*\n * Helpers\n */\nvar NetworkHelper_1 = require(\"./network/NetworkHelper\");\nObject.defineProperty(exports, \"NetworkHelper\", { enumerable: true, get: function () { return NetworkHelper_1.NetworkHelper; } });\nvar NamingHelper_1 = require(\"./transforms/NamingHelper\");\nObject.defineProperty(exports, \"NamingHelper\", { enumerable: true, get: function () { return NamingHelper_1.NamingHelper; } });\nvar ColorHelper_1 = require(\"./transforms/ColorHelper\");\nObject.defineProperty(exports, \"ColorHelper\", { enumerable: true, get: function () { return ColorHelper_1.ColorHelper; } });\nvar FileHelper_1 = require(\"./files/FileHelper\");\nObject.defineProperty(exports, \"FileHelper\", { enumerable: true, get: function () { return FileHelper_1.FileHelper; } });\nvar CSSHelper_1 = require(\"./transforms/CSSHelper\");\nObject.defineProperty(exports, \"CSSHelper\", { enumerable: true, get: function () { return CSSHelper_1.CSSHelper; } });\nvar Iterators_1 = require(\"./aux/Iterators\");\nObject.defineProperty(exports, \"Iterators\", { enumerable: true, get: function () { return Iterators_1.Iterators; } });\n/*\n * Enums\n */\nvar StringCase_1 = require(\"./enums/StringCase\");\nObject.defineProperty(exports, \"StringCase\", { enumerable: true, get: function () { return StringCase_1.StringCase; } });\nvar ColorFormat_1 = require(\"./enums/ColorFormat\");\nObject.defineProperty(exports, \"ColorFormat\", { enumerable: true, get: function () { return ColorFormat_1.ColorFormat; } });\n"],"names":["Object","defineProperty","exports","value","Iterators","sdk_exporters_1","static","TokenType","color","typography","dimension","size","space","opacity","fontSize","lineHeight","letterSpacing","paragraphSpacing","borderWidth","radius","duration","zIndex","shadow","border","gradient","string","productCopy","fontFamily","fontWeight","textCase","textDecoration","visibility","blur","ColorFormat","StringCase","FileHelper","relativePath","fileName","url","path","name","type","OutputFileType","copyRemoteUrl","content","text","data","binary","sureOptionalReference","referenceId","allTokens","allowReferences","token","get","Error","NetworkHelper","sdk","options","this","performFetch","json","arrayBuffer","response","network","fetch","ok","status","error","CSSHelper","tokens_1","ColorHelper_1","tokenType","colorTokenValueToCSS","borderTokenValueToCSS","gradientTokenValueToCSS","dimensionTokenValueToCSS","shadowTokenValueToCSS","stringTokenValueToCSS","optionTokenValueToCSS","blurTokenValueToCSS","typographyTokenValueToCSS","UnreachableCaseError","ColorHelper","formattedColorOrVariableName","reference","referencedTokenId","tokenToVariableRef","width","borderStyleToCSS","style","borderPositionToCSS","position","gradients","map","gradientLayerToCSS","join","gradientType","GradientType","linear","radial","angular","stops","stop","roundToDecimals","decimals","measure","unitToCSS","unit","shadows","layer","shadowLayerToCSS","ShadowType","inner","x","y","spread","option","fontFamilyReference","fontWeightReference","decorationReference","caseReference","TextDecoration","original","textDecorationToCSS","TextCase","textCaseToCSS","smallCaps","borderStyle","BorderStyle","dashed","dotted","solid","groove","borderPosition","BorderPosition","center","inside","outside","Unit","percent","pixels","rem","raw","ms","upper","lower","camel","underline","strikethrough","ColorFormat_1","fullReferenceName","colorReferenceName","opacityReferenceName","fullToken","colorToken","opacityToken","formattedColor","colorFormat","rgb","rgba","smartRgba","colorToRgb","normalizedIntColor","format","hex6","hex8","hashHex6","hashHex8","smartHex","smartHashHex","colorToHex","hsl","hsla","smartHsla","colorToHsl","normalizedFractionalColor","smartUIColor","colorToUIColor","alpha","colorRefReplace","opacityRefReplace","resultingRgb","r","g","b","resultingHex","pHex","Math","round","max","min","h","s","resultingHsl","l","delta","resultingUIColor","multiplier","pow","rounded","parseFloat","toFixed","toString","padStart","NamingHelper","change_case_1","StringCase_1","parent","prefix","fragments","isRoot","push","length","unshift","codeSafeVariableName","sentence","replaceAll","camelCase","capitalCase","constantCase","dotCase","headerCase","noCase","paramCase","pascalCase","pathCase","sentenceCase","snakeCase","match","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","NetworkHelper_1","enumerable","NamingHelper_1","FileHelper_1","CSSHelper_1","Iterators_1"],"sourceRoot":""}